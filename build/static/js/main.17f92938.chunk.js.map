{"version":3,"sources":["components/Navbar.jsx","components/NotFound.jsx","utils/index.js","components/SwapComponent.js","components/Home.jsx","components/Transaction.jsx","components/LiquidityComponent.js","components/Liquidity.jsx","App.js","reportWebVitals.js","index.js"],"names":["Navbar","className","to","NotFound","INITIAL_ALLOWED_SLIPPAGE","ROUTER_ADDRESS","supportedTokens","symbol","address","decimal","getContract","ABI","library","account","value","getAddress","isAddress","AddressZero","Error","Contract","getSigner","connectUnchecked","getProviderOrSigner","getRouterContract","IUniswapV2Router02ABI","calculateGasMargin","console","log","mul","BigNumber","from","add","div","isZero","hexNumberString","test","getAllowance","tokenAddress","owner","spender","a","tokenContract","ERC20ABI","allowance","ACYSwapErrorStatus","errorText","this","computeTradePriceBreakdown","trade","BASE_FEE","Percent","JSBI","BigInt","ONE_HUNDRED_PERCENT","INPUT_FRACTION_AFTER_FEE","subtract","realizedLPFee","route","pairs","reduce","currentFee","multiply","undefined","priceImpactWithoutFeeFraction","priceImpact","priceImpactWithoutFee","numerator","denominator","inputAmount","TokenAmount","token","raw","quotient","CurrencyAmount","ether","getUserTokenBalanceRaw","ETHER","getBalance","contractToCheckForBalance","balanceOf","getUserTokenBalance","chainId","tokenIsETH","formatUnits","Token","calculateSlippageAmount","slippage","divide","approve","requiredAmount","lt","useExact","estimateGas","MaxUint256","catch","toString","result","estimatedGas","gasLimit","res","flag","gte","checkTokenIsApproved","getTokenTotalSupply","totalSupply","parsedResult","swapGetEstimated","inputToken0","inputToken1","allowedSlippage","exactIn","setToken0Amount","setToken1Amount","setNeedApprove","setApproveAmount","setApproveButtonStatus","setSwapBreakdown","setSwapButtonState","setSwapButtonContent","setSwapStatus","setPair","setRoute","setTrade","setSlippageAdjustedAmount","setMinAmountOut","setMaxAmountIn","setWethContract","setWrappedAmount","FACTORY_ADDRESS","inToken0Address","inToken0Symbol","inToken0Decimal","inToken0Amount","amount","inToken1Address","inToken1Symbol","inToken1Decimal","inToken1Amount","isNaN","parseFloat","token0IsETH","token1IsETH","userToken0Balance","userHasSufficientBalance","parseUnits","fault","wethContract","WETHABI","wrappedAmount","toHexString","token0","WETH","token1","equals","Fetcher","fetchPairData","e","pair","Route","parsedAmount","dependentTokenAmount","priceOf","quote","parsed","toExact","Trade","TradeType","EXACT_INPUT","EXACT_OUTPUT","InsufficientReservesError","outputAmount","minAmountOut","minimumAmountOut","slippageAdjustedAmount","maxAmountIn","maximumAmountIn","breakdownInfo","toFixed","toSignificant","currency","token0AmountToApprove","token0approval","status","getErrorText","contract","deposit","withdraw","Router","swapCallParameters","feeOnTransfer","recipient","ttl","methodName","args","options","then","gasEstimate","url","hash","href","target","SwapComponent","useState","setToken0","setToken1","token0Balance","setToken0Balance","token1Balance","setToken1Balance","token0BalanceShow","setToken0BalanceShow","token1BalanceShow","setToken1BalanceShow","token0Amount","token1Amount","slippageTolerance","setSlippageTolerance","setExactIn","needApprove","approveAmount","approveButtonStatus","swapBreakdown","swapButtonState","swapButtonContent","swapStatus","individualFieldPlaceholder","dependentFieldPlaceholder","useWeb3React","activate","injected","InjectedConnector","supportedChainIds","useEffect","t0Changed","useCallback","t1Changed","Alert","variant","Heading","Form","Group","controlId","Dropdown","Toggle","id","Menu","map","index","Item","onClick","alert","Control","placeholder","onFocus","onChange","InputGroup","size","Text","FormControl","aria-label","aria-describedby","info","Button","disabled","swap","getLibrary","provider","connector","Web3Provider","Home","style","Transaction","getEstimated","setNeedApproveToken0","setNeedApproveToken1","setApproveAmountToken0","setApproveAmountToken1","setApproveToken0ButtonShow","setApproveToken1ButtonShow","setLiquidityBreakdown","setButtonContent","setButtonStatus","setLiquidityStatus","setNoLiquidity","setParsedToken0Amount","setParsedToken1Amount","setArgs","setValue","router","reserve0","reserve1","noLiquidity","token0TokenAmount","parsedToken0Amount","parsedToken1Amount","token1TokenAmount","userToken1Balance","liquidityToken","liquidityMinted","getLiquidityMinted","poolTokenPercentage","approveStatus","token1approval","estimate","addLiquidityETH","method","nonETHToken","parsedNonETHTokenAmount","minETH","Math","floor","Date","getTime","addLiquidity","estimatedGasLimit","getAllLiquidityPositions","tokens","filter","totalTokenCount","length","userNonZeroLiquidityPositions","checkLiquidityPositionTasks","i","j","token0Address","token0Symbol","token0Decimal","token1Address","token1Symbol","token1Decimal","pairTask","push","Promise","allSettled","userPoolBalance","totalPoolTokens","token0Deposited","getLiquidityValue","token1Deposited","pool","token0Reserve","token1Reserve","share","LiquidityComponent","needApproveToken0","needApproveToken1","approveAmountToken0","approveAmountToken1","approveToken0ButtonShow","approveToken1ButtonShow","liquidityBreakdown","buttonContent","buttonStatus","liquidityStatus","userLiquidityPositions","setUserLiquidityPositions","getAllUserLiquidityPositions","position","Object","values","field","Liquidity","App","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.17f92938.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./styles/Navbar.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Navbar() {\r\n  return (\r\n    <div className=\"navbar\">\r\n      <h2>Test token</h2>\r\n\r\n      <div className=\"navbar__list\">\r\n        <ul>\r\n          <li>\r\n            <Link to=\"/\">Home</Link>\r\n          </li>\r\n\r\n          <li>\r\n            <Link to=\"/Liquidity\">Liquidity</Link>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\n\r\nfunction NotFound() {\r\n  return (\r\n    <div>\r\n      <h1>404- Page not Found</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NotFound;\r\n","import { abi as IUniswapV2Router02ABI } from \"../abis/IUniswapV2Router02.json\";\r\nimport { abi as IUniswapV2PairABI } from \"@uniswap/v2-core/build/IUniswapV2Pair.json\";\r\nimport ERC20ABI from \"../abis/ERC20.json\";\r\nimport { getAddress } from \"@ethersproject/address\";\r\nimport { Contract } from \"@ethersproject/contracts\";\r\nimport { AddressZero } from \"@ethersproject/constants\";\r\nimport { BigNumber } from \"@ethersproject/bignumber\";\r\nimport { parseUnits, formatUnits } from \"@ethersproject/units\";\r\nimport {\r\n  JSBI,\r\n  Token,\r\n  TokenAmount,\r\n  TradeType,\r\n  Route,\r\n  Trade,\r\n  Fetcher,\r\n  Percent,\r\n  WETH,\r\n  ETHER,\r\n  CurrencyAmount,\r\n  InsufficientReservesError,\r\n} from \"@uniswap/sdk\";\r\nimport { MaxUint256 } from \"@ethersproject/constants\";\r\n\r\nexport const INITIAL_ALLOWED_SLIPPAGE = 50; //bips\r\n\r\nexport const ROUTER_ADDRESS = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\";\r\n// export const ROUTER_ADDRESS = \"0xF3726d6acfeda3E73a6F2328b948834f3Af39A2B\";\r\n\r\nexport const supportedTokens = [\r\n  {\r\n    symbol: \"USDC\",\r\n    address: \"0x4DBCdF9B62e891a7cec5A2568C3F4FAF9E8Abe2b\",\r\n    decimal: 6,\r\n  },\r\n  {\r\n    symbol: \"ETH\",\r\n    address: \"0xc778417E063141139Fce010982780140Aa0cD5Ab\",\r\n    decimal: 18,\r\n  },\r\n  {\r\n    symbol: \"TEST\",\r\n    address: \"0xAEd3ed6cF66E1CB13ab8DC312a0dC91bc0936721\",\r\n    decimal: 18,\r\n  },\r\n];\r\n\r\nexport function isAddress(value) {\r\n  try {\r\n    return getAddress(value);\r\n  } catch {\r\n    return false;\r\n  }\r\n}\r\n\r\n// account is not optional\r\nexport function getSigner(library, account) {\r\n  return library.getSigner(account).connectUnchecked();\r\n}\r\n\r\n// account is optional\r\nexport function getProviderOrSigner(library, account) {\r\n  return account ? getSigner(library, account) : library;\r\n}\r\n\r\n// account is optional\r\nexport function getContract(address, ABI, library, account) {\r\n  if (!isAddress(address) || address === AddressZero) {\r\n    throw Error(`Invalid 'address' parameter '${address}'.`);\r\n  }\r\n\r\n  return new Contract(address, ABI, getProviderOrSigner(library, account));\r\n}\r\n\r\nexport function getRouterContract(library, account) {\r\n  return getContract(ROUTER_ADDRESS, IUniswapV2Router02ABI, library, account);\r\n}\r\n\r\nexport function getPairContract(pairAddress, library, account) {\r\n  return getContract(pairAddress, IUniswapV2PairABI, library, account);\r\n}\r\n\r\n// return gas with 10% added margin in BigNumber\r\nexport function calculateGasMargin(value) {\r\n  console.log(\"just calculateGasMargin\");\r\n  return value\r\n    .mul(BigNumber.from(10000).add(BigNumber.from(1000)))\r\n    .div(BigNumber.from(10000));\r\n}\r\n\r\n// check if hex string is zero\r\nexport function isZero(hexNumberString) {\r\n  return /^0x0*$/.test(hexNumberString);\r\n}\r\n\r\n// return token allowance in BigNumber\r\nexport async function getAllowance(\r\n  tokenAddress,\r\n  owner,\r\n  spender,\r\n  library,\r\n  account\r\n) {\r\n  let tokenContract = getContract(tokenAddress, ERC20ABI, library, account);\r\n  let allowance = await tokenContract.allowance(owner, spender);\r\n  console.log(allowance);\r\n  return allowance;\r\n}\r\n\r\n// a custom error class for custom error text and handling\r\nexport class ACYSwapErrorStatus {\r\n  getErrorText() {\r\n    return this.errorText;\r\n  }\r\n  constructor(errorText) {\r\n    this.errorText = errorText;\r\n  }\r\n}\r\n\r\n// taken from Uniswap, used for price impact and realized liquid provider fee\r\nexport function computeTradePriceBreakdown(trade) {\r\n  const BASE_FEE = new Percent(JSBI.BigInt(30), JSBI.BigInt(10000));\r\n  const ONE_HUNDRED_PERCENT = new Percent(\r\n    JSBI.BigInt(10000),\r\n    JSBI.BigInt(10000)\r\n  );\r\n  const INPUT_FRACTION_AFTER_FEE = ONE_HUNDRED_PERCENT.subtract(BASE_FEE);\r\n\r\n  // for each hop in our trade, take away the x*y=k price impact from 0.3% fees\r\n  // e.g. for 3 tokens/2 hops: 1 - ((1 - .03) * (1-.03))\r\n  const realizedLPFee = !trade\r\n    ? undefined\r\n    : ONE_HUNDRED_PERCENT.subtract(\r\n        trade.route.pairs.reduce(\r\n          (currentFee) => currentFee.multiply(INPUT_FRACTION_AFTER_FEE),\r\n          ONE_HUNDRED_PERCENT\r\n        )\r\n      );\r\n\r\n  // remove lp fees from price impact\r\n  const priceImpactWithoutFeeFraction =\r\n    trade && realizedLPFee\r\n      ? trade.priceImpact.subtract(realizedLPFee)\r\n      : undefined;\r\n\r\n  // the x*y=k impact\r\n  const priceImpactWithoutFeePercent = priceImpactWithoutFeeFraction\r\n    ? new Percent(\r\n        priceImpactWithoutFeeFraction?.numerator,\r\n        priceImpactWithoutFeeFraction?.denominator\r\n      )\r\n    : undefined;\r\n\r\n  // the amount of the input that accrues to LPs\r\n  const realizedLPFeeAmount =\r\n    realizedLPFee &&\r\n    trade &&\r\n    (trade.inputAmount instanceof TokenAmount\r\n      ? new TokenAmount(\r\n          trade.inputAmount.token,\r\n          realizedLPFee.multiply(trade.inputAmount.raw).quotient\r\n        )\r\n      : CurrencyAmount.ether(\r\n          realizedLPFee.multiply(trade.inputAmount.raw).quotient\r\n        ));\r\n\r\n  return {\r\n    priceImpactWithoutFee: priceImpactWithoutFeePercent,\r\n    realizedLPFee: realizedLPFeeAmount,\r\n  };\r\n}\r\n\r\n// get user token balance in BigNumber\r\nexport async function getUserTokenBalanceRaw(token, account, library) {\r\n  if (token === ETHER) {\r\n    return await library.getBalance(account);\r\n  } else {\r\n    let contractToCheckForBalance = getContract(\r\n      token.address,\r\n      ERC20ABI,\r\n      library,\r\n      account\r\n    );\r\n    return await contractToCheckForBalance.balanceOf(account);\r\n  }\r\n}\r\n\r\n// get user token balance in readable string foramt\r\nexport async function getUserTokenBalance(token, chainId, account, library) {\r\n  let { address, symbol, decimal } = token;\r\n\r\n  if (!token) return;\r\n  let tokenIsETH = symbol === \"ETH\";\r\n\r\n  return formatUnits(\r\n    await getUserTokenBalanceRaw(\r\n      tokenIsETH ? ETHER : new Token(chainId, address, decimal, symbol),\r\n      account,\r\n      library\r\n    ),\r\n    decimal\r\n  );\r\n}\r\n\r\n// return slippage adjusted amount for arguments when adding liquidity. Returns JSBI\r\nexport function calculateSlippageAmount(value, slippage) {\r\n  if (slippage < 0 || slippage > 10000) {\r\n    throw Error(`Unexpected slippage value: ${slippage}`);\r\n  }\r\n  return [\r\n    JSBI.divide(\r\n      JSBI.multiply(value.raw, JSBI.BigInt(10000 - slippage)),\r\n      JSBI.BigInt(10000)\r\n    ),\r\n    JSBI.divide(\r\n      JSBI.multiply(value.raw, JSBI.BigInt(10000 + slippage)),\r\n      JSBI.BigInt(10000)\r\n    ),\r\n  ];\r\n}\r\n\r\n// approve an ERC-20 token\r\nexport async function approve(tokenAddress, requiredAmount, library, account) {\r\n  if (requiredAmount === \"0\") {\r\n    console.log(\"Unncessary call to approve\");\r\n    return true;\r\n  }\r\n\r\n  let allowance = await getAllowance(\r\n    tokenAddress,\r\n    account, // owner\r\n    ROUTER_ADDRESS, //spender\r\n    library, // provider\r\n    account // active account\r\n  );\r\n\r\n  console.log(`ALLOWANCE FOR TOKEN ${tokenAddress}`);\r\n  console.log(allowance);\r\n\r\n  console.log(\"REquired amount\");\r\n  console.log(requiredAmount);\r\n  if (allowance.lt(BigNumber.from(requiredAmount))) {\r\n    let tokenContract = getContract(tokenAddress, ERC20ABI, library, account);\r\n    let useExact = false;\r\n    console.log(\"NOT ENOUGH ALLOWANCE\");\r\n    // try to get max allowance\r\n    let estimatedGas = await tokenContract.estimateGas[\"approve\"](\r\n      ROUTER_ADDRESS,\r\n      MaxUint256\r\n    ).catch(async () => {\r\n      // general fallback for tokens who restrict approval amounts\r\n      useExact = true;\r\n      let result = await tokenContract.estimateGas.approve(\r\n        ROUTER_ADDRESS,\r\n        requiredAmount.raw.toString()\r\n      );\r\n      return result;\r\n    });\r\n\r\n    console.log(`Exact? ${useExact}`);\r\n    let res = await tokenContract\r\n      .approve(\r\n        ROUTER_ADDRESS,\r\n        useExact ? requiredAmount.raw.toString() : MaxUint256,\r\n        {\r\n          gasLimit: calculateGasMargin(estimatedGas),\r\n        }\r\n      )\r\n      .catch(() => {\r\n        console.log(\"not approve success\");\r\n        return false;\r\n      });\r\n    console.log(res);\r\n\r\n    if (res == false) {\r\n      return false;\r\n    }\r\n\r\n    let flag = false;\r\n\r\n    while (1) {\r\n      let newAllowance = await getAllowance(\r\n        tokenAddress,\r\n        account, // owner\r\n        ROUTER_ADDRESS, //spender\r\n        library, // provider\r\n        account // active account\r\n      );\r\n\r\n      if (newAllowance.gte(BigNumber.from(requiredAmount))) {\r\n        flag = true;\r\n        break;\r\n      }\r\n    }\r\n    if (flag) return true;\r\n  } else {\r\n    console.log(\"Allowance sufficient\");\r\n    return true;\r\n  }\r\n}\r\n\r\n// should be used in polling to check status of token approval every n seconds\r\nexport async function checkTokenIsApproved(\r\n  tokenAddress,\r\n  requiredAmount,\r\n  library,\r\n  account\r\n) {\r\n  let allowance = await getAllowance(\r\n    tokenAddress,\r\n    account, // owner\r\n    ROUTER_ADDRESS, //spender\r\n    library, // provider\r\n    account // active account\r\n  );\r\n\r\n  console.log(\"REQUIRED AMOUNT:\");\r\n  console.log(requiredAmount);\r\n  console.log(`ALLOWANCE FOR TOKEN ${tokenAddress}:`);\r\n  console.log(allowance);\r\n  return allowance.gte(BigNumber.from(requiredAmount));\r\n}\r\n\r\n// get total supply of a ERC-20 token, can be liquidity token\r\nexport async function getTokenTotalSupply(token, library, account) {\r\n  let tokenContract = getContract(token.address, ERC20ABI, library, account);\r\n  let totalSupply = await tokenContract.totalSupply();\r\n  let parsedResult = new TokenAmount(token, totalSupply.toString());\r\n\r\n  return parsedResult;\r\n}\r\n","import \"./styles/SwapComponent.css\";\r\nimport { useWeb3React } from \"@web3-react/core\";\r\nimport { InjectedConnector } from \"@web3-react/injected-connector\";\r\nimport { useCallback, useEffect, useState } from \"react\";\r\nimport {\r\n  ACYSwapErrorStatus,\r\n  approve,\r\n  calculateGasMargin,\r\n  checkTokenIsApproved,\r\n  computeTradePriceBreakdown,\r\n  getAllowance,\r\n  getContract,\r\n  getRouterContract,\r\n  getUserTokenBalance,\r\n  getUserTokenBalanceRaw,\r\n  INITIAL_ALLOWED_SLIPPAGE,\r\n  isZero,\r\n  ROUTER_ADDRESS,\r\n  supportedTokens,\r\n} from \"../utils\";\r\n\r\nimport {\r\n  Alert,\r\n  Button,\r\n  Dropdown,\r\n  Form,\r\n  FormControl,\r\n  InputGroup,\r\n} from \"react-bootstrap\";\r\n\r\nimport WETHABI from \"../abis/WETH.json\";\r\n\r\nimport {\r\n  CurrencyAmount,\r\n  ETHER,\r\n  FACTORY_ADDRESS,\r\n  Fetcher,\r\n  InsufficientReservesError,\r\n  Pair,\r\n  Percent,\r\n  Route,\r\n  Router,\r\n  Token,\r\n  TokenAmount,\r\n  Trade,\r\n  TradeType,\r\n  WETH,\r\n} from \"@uniswap/sdk\";\r\n\r\nimport { BigNumber } from \"@ethersproject/bignumber\";\r\nimport { parseUnits } from \"@ethersproject/units\";\r\n\r\n// get the estimated amount  of the other token required when swapping, in readable string.\r\nexport async function swapGetEstimated(\r\n  inputToken0,\r\n  inputToken1,\r\n  allowedSlippage = INITIAL_ALLOWED_SLIPPAGE,\r\n  exactIn = true,\r\n  chainId,\r\n  library,\r\n  account,\r\n  setToken0Amount,\r\n  setToken1Amount,\r\n  setNeedApprove,\r\n  setApproveAmount,\r\n  setApproveButtonStatus,\r\n  setSwapBreakdown,\r\n  setSwapButtonState,\r\n  setSwapButtonContent,\r\n  setSwapStatus,\r\n  setPair,\r\n  setRoute,\r\n  setTrade,\r\n  setSlippageAdjustedAmount,\r\n  setMinAmountOut,\r\n  setMaxAmountIn,\r\n  setWethContract,\r\n  setWrappedAmount\r\n) {\r\n  let status = await (async () => {\r\n    // check uniswap\r\n    console.log(FACTORY_ADDRESS);\r\n    // change slippage from bips (0.01%) into percentage\r\n    let slippage = allowedSlippage * 0.01;\r\n    allowedSlippage = new Percent(allowedSlippage, 10000);\r\n    setSwapBreakdown(\"\");\r\n    setSwapButtonState(false);\r\n    setSwapButtonContent(\"loading...\");\r\n    setSwapStatus(\"\");\r\n\r\n    let contract = getRouterContract(library, account);\r\n    let {\r\n      address: inToken0Address,\r\n      symbol: inToken0Symbol,\r\n      decimal: inToken0Decimal,\r\n      amount: inToken0Amount,\r\n    } = inputToken0;\r\n    let {\r\n      address: inToken1Address,\r\n      symbol: inToken1Symbol,\r\n      decimal: inToken1Decimal,\r\n      amount: inToken1Amount,\r\n    } = inputToken1;\r\n\r\n    if (!inputToken0.symbol || !inputToken1.symbol)\r\n      return new ACYSwapErrorStatus(\"please choose tokens\");\r\n    if (exactIn && inToken0Amount == \"0\")\r\n      return new ACYSwapErrorStatus(\"token0Amount is 0\");\r\n    if (!exactIn && inToken1Amount == \"0\")\r\n      return new ACYSwapErrorStatus(\"token1Amount is 0\");\r\n    if (exactIn && inToken0Amount == \"\")\r\n      return new ACYSwapErrorStatus('token0Amount is \"\"');\r\n    if (!exactIn && inToken1Amount == \"\")\r\n      return new ACYSwapErrorStatus('token1Amount is \"\"');\r\n    if (exactIn && isNaN(parseFloat(inToken0Amount)))\r\n      return new ACYSwapErrorStatus(\"token0Amount is NaN\");\r\n    if (!exactIn && isNaN(parseFloat(inToken1Amount)))\r\n      return new ACYSwapErrorStatus(\"token1Amount is NaN\");\r\n\r\n    console.log(`token0Amount: ${inToken0Amount}`);\r\n    console.log(`token1Amount: ${inToken1Amount}`);\r\n\r\n    let token0IsETH = inToken0Symbol === \"ETH\";\r\n    let token1IsETH = inToken1Symbol === \"ETH\";\r\n\r\n    console.log(inputToken0);\r\n    console.log(inputToken1);\r\n\r\n    if (token0IsETH && token1IsETH) {\r\n      setSwapButtonState(false);\r\n      setSwapButtonContent(\"don't support ETH to ETH\");\r\n      return new ACYSwapErrorStatus(\"don't support ETH to ETH\");\r\n    }\r\n    // if one is ETH and other WETH, use WETH contract's deposit and withdraw\r\n    // wrap ETH into WETH\r\n    else if (token0IsETH && inToken1Symbol === \"WETH\") {\r\n      // UI should sync value of ETH and WETH\r\n      if (exactIn) {\r\n        setToken1Amount(inToken0Amount);\r\n        inToken1Amount = inToken0Amount;\r\n      } else {\r\n        setToken0Amount(inToken1Amount);\r\n        inToken0Amount = inToken1Amount;\r\n      }\r\n      console.log(\"------------------ CHECK BALANCE ------------------\");\r\n      // Big Number comparison\r\n\r\n      let userToken0Balance = await getUserTokenBalanceRaw(\r\n        token0IsETH\r\n          ? ETHER\r\n          : new Token(\r\n              chainId,\r\n              inToken0Address,\r\n              inToken0Decimal,\r\n              inToken0Symbol\r\n            ),\r\n        account,\r\n        library\r\n      );\r\n\r\n      let userHasSufficientBalance;\r\n      try {\r\n        userHasSufficientBalance = userToken0Balance.gte(\r\n          parseUnits(inToken0Amount, inToken0Decimal)\r\n        );\r\n      } catch (e) {\r\n        console.log(\"this is wrong!\");\r\n        console.log(e);\r\n        setSwapButtonState(false);\r\n        if (e.fault === \"underflow\") setSwapButtonContent(e.fault);\r\n        else setSwapButtonContent(\"unknow error\");\r\n        return new ACYSwapErrorStatus(e.fault);\r\n      }\r\n\r\n      console.log(userToken0Balance);\r\n      console.log(\"token0Amount\");\r\n      console.log(inToken0Amount);\r\n\r\n      // quit if user doesn't have enough balance, otherwise this will cause error\r\n      if (!userHasSufficientBalance) {\r\n        setSwapButtonState(false);\r\n        setSwapButtonContent(\"NOT enough balance\");\r\n        return new ACYSwapErrorStatus(\"NOT enough balance\");\r\n      }\r\n      // setEstimatedStatus(\"change ETH to WETH\");\r\n      setSwapButtonState(true);\r\n      setSwapButtonContent(\"wrap\");\r\n\r\n      const wethContract = getContract(\r\n        inToken1Address,\r\n        WETHABI,\r\n        library,\r\n        account\r\n      );\r\n      let wrappedAmount;\r\n\r\n      try {\r\n        wrappedAmount = BigNumber.from(\r\n          parseUnits(inToken0Amount, inToken0Decimal)\r\n        ).toHexString();\r\n      } catch (e) {\r\n        console.log(\"wrappedAmount!!\");\r\n        console.log(e);\r\n        setSwapButtonState(false);\r\n        if (e.fault === \"underflow\") {\r\n          setSwapButtonContent(e.fault);\r\n          return new ACYSwapErrorStatus(e.fault);\r\n        } else {\r\n          setSwapButtonContent(\"unknow error\");\r\n          return new ACYSwapErrorStatus(\"unknow error\");\r\n        }\r\n      }\r\n\r\n      setWethContract(wethContract);\r\n      setWrappedAmount(wrappedAmount);\r\n\r\n      // let result = await wethContract\r\n      //     .deposit({\r\n      //         value: wrappedAmount,\r\n      //     })\r\n      //     .catch((e) => {\r\n      //         console.log(e);\r\n      //         return new ACYSwapErrorStatus(\"WETH Deposit failed\");\r\n      //     });\r\n      // return result;\r\n      return \"Wrap is ok\";\r\n    } else if (inToken0Symbol === \"WETH\" && token1IsETH) {\r\n      console.log(\"UNWRAP\");\r\n      if (exactIn) {\r\n        setToken1Amount(inToken0Amount);\r\n        inToken1Amount = inToken0Amount;\r\n      } else {\r\n        setToken0Amount(inToken1Amount);\r\n        inToken0Amount = inToken1Amount;\r\n      }\r\n\r\n      let userToken0Balance = await getUserTokenBalanceRaw(\r\n        token0IsETH\r\n          ? ETHER\r\n          : new Token(\r\n              chainId,\r\n              inToken0Address,\r\n              inToken0Decimal,\r\n              inToken0Symbol\r\n            ),\r\n        account,\r\n        library\r\n      );\r\n\r\n      let userHasSufficientBalance;\r\n      try {\r\n        userHasSufficientBalance = userToken0Balance.gte(\r\n          parseUnits(inToken0Amount, inToken0Decimal)\r\n        );\r\n      } catch (e) {\r\n        console.log(\"userHasSufficientBalance!!!\");\r\n        console.log(e);\r\n        setSwapButtonState(false);\r\n        if (e.fault === \"underflow\") {\r\n          setSwapButtonContent(e.fault);\r\n          return new ACYSwapErrorStatus(e.fault);\r\n        } else {\r\n          setSwapButtonContent(\"unknow error\");\r\n          return new ACYSwapErrorStatus(\"unknow error\");\r\n        }\r\n      }\r\n\r\n      // quit if user doesn't have enough balance, otherwise this will cause error\r\n      if (!userHasSufficientBalance) {\r\n        setSwapButtonState(false);\r\n        setSwapButtonContent(\"Not enough balance\");\r\n        return new ACYSwapErrorStatus(\"NOT enough balance\");\r\n      }\r\n\r\n      setSwapButtonState(true);\r\n      setSwapButtonContent(\"unwrap\");\r\n\r\n      const wethContract = getContract(\r\n        inToken0Address,\r\n        WETHABI,\r\n        library,\r\n        account\r\n      );\r\n\r\n      let wrappedAmount;\r\n      try {\r\n        wrappedAmount = BigNumber.from(\r\n          parseUnits(inToken0Amount, inToken0Decimal)\r\n        ).toHexString();\r\n      } catch (e) {\r\n        console.log(\"wrappedAmount!!!\");\r\n        console.log(e);\r\n        setSwapButtonState(false);\r\n        if (e.fault === \"underflow\") {\r\n          setSwapButtonContent(e.fault);\r\n          return new ACYSwapErrorStatus(e.fault);\r\n        } else {\r\n          setSwapButtonContent(\"unknow error\");\r\n          return new ACYSwapErrorStatus(\"unknow error\");\r\n        }\r\n      }\r\n      setWethContract(wethContract);\r\n      setWrappedAmount(wrappedAmount);\r\n\r\n      // let result = await wethContract.withdraw(wrappedAmount).catch((e) => {\r\n      //     console.log(e);\r\n      //     return new ACYSwapErrorStatus(\"WETH Withdrawal failed\");\r\n      // });\r\n      // return result;\r\n\r\n      return \"unwrap is ok\";\r\n    }\r\n    // ETH <-> Non-WETH ERC20     OR     Non-WETH ERC20 <-> Non-WETH ERC20\r\n    else {\r\n      console.log(\"SWAP\");\r\n      console.log(\"------------------ CONSTRUCT TOKEN ------------------\");\r\n      // use WETH for ETHER to work with Uniswap V2 SDK\r\n      const token0 = token0IsETH\r\n        ? WETH[chainId]\r\n        : new Token(chainId, inToken0Address, inToken0Decimal, inToken0Symbol);\r\n      const token1 = token1IsETH\r\n        ? WETH[chainId]\r\n        : new Token(chainId, inToken1Address, inToken1Decimal, inToken1Symbol);\r\n\r\n      if (token0.equals(token1)) {\r\n        setSwapButtonState(false);\r\n        setSwapButtonContent(\"tokens are same\");\r\n        return new ACYSwapErrorStatus(\"tokens are same\");\r\n      }\r\n      // get pair using our own provider\r\n      const pair = await Fetcher.fetchPairData(token0, token1, library).catch(\r\n        (e) => {\r\n          return new ACYSwapErrorStatus(\r\n            `${token0.symbol} - ${token1.symbol} pool does not exist. Create one?`\r\n          );\r\n        }\r\n      );\r\n      if (pair instanceof ACYSwapErrorStatus) {\r\n        setSwapButtonState(false);\r\n        setSwapButtonContent(\"pool doesn't exist\");\r\n        return pair;\r\n      }\r\n\r\n      console.log(pair);\r\n      setPair(pair);\r\n      console.log(\"------------------ CONSTRUCT ROUTE ------------------\");\r\n      // This is where we let Uniswap SDK know we are not using WETH but ETHER\r\n\r\n      const route = new Route(\r\n        [pair],\r\n        token0IsETH ? ETHER : token0,\r\n        token1IsETH ? ETHER : token1\r\n      );\r\n\r\n      console.log(route);\r\n\r\n      setRoute(route);\r\n      console.log(\"------------------ PARSE AMOUNT ------------------\");\r\n\r\n      // convert typed in amount to BigNumbe rusing ethers.js's parseUnits then to string,\r\n      console.log(inToken0Amount);\r\n      console.log(inToken0Decimal);\r\n\r\n      let parsedAmount;\r\n\r\n      try {\r\n        parsedAmount = exactIn\r\n          ? new TokenAmount(\r\n              token0,\r\n              parseUnits(inToken0Amount, inToken0Decimal)\r\n            ).raw.toString(16)\r\n          : new TokenAmount(\r\n              token1,\r\n              parseUnits(inToken1Amount, inToken1Decimal)\r\n            ).raw.toString(16);\r\n      } catch (e) {\r\n        console.log(\"parsedAmount!!!\");\r\n        console.log(e);\r\n        setSwapButtonState(false);\r\n        if (e.fault === \"underflow\") {\r\n          setSwapButtonContent(e.fault);\r\n          return new ACYSwapErrorStatus(e.fault);\r\n        } else {\r\n          setSwapButtonContent(\"unknow error\");\r\n          return new ACYSwapErrorStatus(\"unknow error\");\r\n        }\r\n      }\r\n\r\n      let inputAmount;\r\n      // CurrencyAmount instance is required for Trade contructor if input is ETHER\r\n      if ((token0IsETH && exactIn) || (token1IsETH && !exactIn)) {\r\n        inputAmount = new CurrencyAmount(ETHER, `0x${parsedAmount}`);\r\n      } else {\r\n        inputAmount = new TokenAmount(\r\n          exactIn ? token0 : token1,\r\n          `0x${parsedAmount}`\r\n        );\r\n      }\r\n      console.log(\"estimated dependent amount\");\r\n      // console.log(pair.priceOf(token0).quote(inputAmount).raw.toString());\r\n      let dependentTokenAmount = pair\r\n        .priceOf(token0)\r\n        .quote(new TokenAmount(token0, inputAmount.raw));\r\n\r\n      let parsed =\r\n        token1 === ETHER\r\n          ? CurrencyAmount.ether(dependentTokenAmount.raw)\r\n          : dependentTokenAmount;\r\n      console.log(parsed.toExact());\r\n\r\n      //===================================================================================\r\n\r\n      console.log(\"------------------ CONSTRUCT TRADE ------------------\");\r\n      let trade;\r\n      try {\r\n        trade = new Trade(\r\n          route,\r\n          inputAmount,\r\n          exactIn ? TradeType.EXACT_INPUT : TradeType.EXACT_OUTPUT\r\n        );\r\n      } catch (e) {\r\n        if (e instanceof InsufficientReservesError) {\r\n          setSwapButtonState(false);\r\n          setSwapButtonContent(\"Insufficient liquidity for this trade\");\r\n          console.log(\"Insufficient reserve!\");\r\n          return new ACYSwapErrorStatus(\"Insufficient reserve!\");\r\n        } else {\r\n          setSwapButtonState(false);\r\n          setSwapButtonContent(\"Unhandled exception!\");\r\n          console.log(\"Unhandled exception!\");\r\n          console.log(e);\r\n          return new ACYSwapErrorStatus(\"Unhandled exception!\");\r\n        }\r\n      }\r\n\r\n      console.log(trade);\r\n      setTrade(trade);\r\n      console.log(\"------------------ SLIPPAGE CALCULATE ------------------\");\r\n\r\n      let slippageAdjustedAmount;\r\n      let minAmountOut;\r\n      let maxAmountIn;\r\n\r\n      // calculate slippage adjusted amount\r\n      if (exactIn) {\r\n        // console.log(trade.outputAmount.toExact());\r\n        // setToken1Amount(trade.outputAmount.toExact());\r\n        console.log(\r\n          `By algorithm, expected to get: ${trade.outputAmount.toExact()}`\r\n        );\r\n        // if provided exact token in, we want to know min out token amount\r\n        minAmountOut = trade.minimumAmountOut(allowedSlippage);\r\n        slippageAdjustedAmount = minAmountOut.raw.toString();\r\n\r\n        // update UI with estimated output token amount\r\n        setToken1Amount(trade.outputAmount.toExact());\r\n        console.log(`Minimum received: ${slippageAdjustedAmount}`);\r\n      } else {\r\n        console.log(\r\n          `By algorithm, expected to get: ${trade.inputAmount.toExact()}`\r\n        );\r\n        maxAmountIn = trade.maximumAmountIn(allowedSlippage);\r\n        slippageAdjustedAmount = maxAmountIn.raw.toString();\r\n        setToken0Amount(trade.inputAmount.toExact());\r\n        console.log(`Maximum pay: ${slippageAdjustedAmount}`);\r\n      }\r\n\r\n      setSlippageAdjustedAmount(slippageAdjustedAmount);\r\n      setMinAmountOut(minAmountOut);\r\n      setMaxAmountIn(maxAmountIn);\r\n\r\n      let userToken0Balance = await getUserTokenBalanceRaw(\r\n        token0IsETH\r\n          ? ETHER\r\n          : new Token(\r\n              chainId,\r\n              inToken0Address,\r\n              inToken0Decimal,\r\n              inToken0Symbol\r\n            ),\r\n        account,\r\n        library\r\n      );\r\n\r\n      let userHasSufficientBalance;\r\n      try {\r\n        userHasSufficientBalance = userToken0Balance.gte(\r\n          parseUnits(inToken0Amount, inToken0Decimal)\r\n        );\r\n      } catch (e) {\r\n        console.log(\"wrappedAmount!!!\");\r\n        console.log(e);\r\n        setSwapButtonState(false);\r\n        setSwapButtonContent(e.fault);\r\n        return new ACYSwapErrorStatus(e.fault);\r\n      }\r\n\r\n      // quit if user doesn't have enough balance, otherwise this will cause error\r\n      if (!userHasSufficientBalance) {\r\n        setSwapButtonState(false);\r\n        setSwapButtonContent(\"Not Enough balance\");\r\n        return;\r\n      }\r\n\r\n      console.log(\"------------------ BREAKDOWN ------------------\");\r\n      let { priceImpactWithoutFee, realizedLPFee } =\r\n        computeTradePriceBreakdown(trade);\r\n      let breakdownInfo = [\r\n        // `Slice Slippage tolerance:` ${allowedSlippage} %`\r\n        `Slippage tolerance : ${slippage}%`,\r\n        `Price impact : ${priceImpactWithoutFee.toFixed(2)}%`,\r\n        `LP FEE : ${realizedLPFee?.toSignificant(6)} ${\r\n          trade.inputAmount.currency.symbol\r\n        }`,\r\n        `${exactIn ? \"Min received:\" : \"Max sold\"} : ${\r\n          exactIn ? minAmountOut.toSignificant(4) : maxAmountIn.toSignificant(4)\r\n        } ${\r\n          exactIn\r\n            ? trade.outputAmount.currency.symbol\r\n            : trade.inputAmount.currency.symbol\r\n        }`,\r\n      ];\r\n\r\n      // setEstimatedStatus(\"you can click the swap button\");\r\n      setSwapBreakdown(breakdownInfo);\r\n\r\n      console.log(\"------------------ ALLOWANCE ------------------\");\r\n      if (!token0IsETH) {\r\n        let allowance = await getAllowance(\r\n          inToken0Address,\r\n          account,\r\n          ROUTER_ADDRESS,\r\n          library,\r\n          account\r\n        );\r\n\r\n        console.log(\r\n          `Current allowance for ${trade.inputAmount.currency.symbol}:`\r\n        );\r\n        console.log(allowance);\r\n        let token0AmountToApprove = exactIn\r\n          ? inputAmount.raw.toString()\r\n          : slippageAdjustedAmount;\r\n        let token0approval = await checkTokenIsApproved(\r\n          inToken0Address,\r\n          token0AmountToApprove,\r\n          library,\r\n          account\r\n        );\r\n        console.log(token0approval);\r\n        if (!token0approval) {\r\n          console.log(\"Not enough allowance\");\r\n          setApproveAmount(token0AmountToApprove);\r\n          // when needApprove = true, please show the button of [Approve]\r\n          setNeedApprove(true);\r\n          setApproveButtonStatus(true);\r\n          setSwapButtonState(false);\r\n          setSwapButtonContent(\"need approve\");\r\n          return \"approve is ok\";\r\n        } else {\r\n          setSwapButtonContent(\"swap\");\r\n          setSwapButtonState(true);\r\n          return \"swap is ok\";\r\n        }\r\n      }\r\n      setSwapButtonContent(\"swap\");\r\n      setSwapButtonState(true);\r\n\r\n      return \"swap is ok\";\r\n    }\r\n  })();\r\n  if (status instanceof ACYSwapErrorStatus) {\r\n    console.log(status.getErrorText());\r\n  } else {\r\n    console.log(status);\r\n  }\r\n  return;\r\n}\r\n\r\nexport async function swap(\r\n  inputToken0,\r\n  inputToken1,\r\n  allowedSlippage = INITIAL_ALLOWED_SLIPPAGE,\r\n  exactIn = true,\r\n  chainId,\r\n  library,\r\n  account,\r\n  pair,\r\n  route,\r\n  trade,\r\n  slippageAdjustedAmount,\r\n  minAmountOut,\r\n  maxAmountIn,\r\n  wethContract,\r\n  wrappedAmount,\r\n  setSwapStatus\r\n) {\r\n  let status = await (async () => {\r\n    // check uniswap\r\n    console.log(FACTORY_ADDRESS);\r\n    // change slippage from bips (0.01%) into percentage\r\n    allowedSlippage = new Percent(allowedSlippage, 10000);\r\n\r\n    let contract = getRouterContract(library, account);\r\n    let {\r\n      address: inToken0Address,\r\n      symbol: inToken0Symbol,\r\n      decimal: inToken0Decimal,\r\n      amount: inToken0Amount,\r\n    } = inputToken0;\r\n    let {\r\n      address: inToken1Address,\r\n      symbol: inToken1Symbol,\r\n      decimal: inToken1Decimal,\r\n      amount: inToken1Amount,\r\n    } = inputToken1;\r\n\r\n    console.log(`token0Amount: ${inToken0Amount}`);\r\n    console.log(`token1Amount: ${inToken1Amount}`);\r\n\r\n    let token0IsETH = inToken0Symbol === \"ETH\";\r\n    let token1IsETH = inToken1Symbol === \"ETH\";\r\n\r\n    console.log(inputToken0);\r\n    console.log(inputToken1);\r\n\r\n    if (token0IsETH && token1IsETH)\r\n      return new ACYSwapErrorStatus(\"Doesn't support ETH to ETH\");\r\n    console.log(\"------------------ WRAP OR SWAP  ------------------\");\r\n    // if one is ETH and other WETH, use WETH contract's deposit and withdraw\r\n    // wrap ETH into WETH\r\n    if (token0IsETH && inToken1Symbol === \"WETH\") {\r\n      console.log(\"WRAP\");\r\n      // UI should sync value of ETH and WETH\r\n      // if (exactIn) setToken1Amount(token0Amount);\r\n      // else setToken0Amount(token1Amount);\r\n      let result = await wethContract\r\n        .deposit({\r\n          value: wrappedAmount,\r\n        })\r\n        .catch((e) => {\r\n          console.log(e);\r\n          return new ACYSwapErrorStatus(\"WETH Deposit failed\");\r\n        });\r\n\r\n      return result;\r\n    }\r\n    // unwrap WETH into ETH\r\n    else if (inToken0Symbol === \"WETH\" && token1IsETH) {\r\n      console.log(\"UNWRAP\");\r\n\r\n      // UI should sync value of ETH and WETH\r\n      // if (exactIn) setToken1Amount(token0Amount);\r\n      // else setToken0Amount(token1Amount);\r\n\r\n      let result = await wethContract.withdraw(wrappedAmount).catch((e) => {\r\n        console.log(e);\r\n        return new ACYSwapErrorStatus(\"WETH Withdrawal failed\");\r\n      });\r\n      return result;\r\n    }\r\n    // ETH <-> Non-WETH ERC20     OR     Non-WETH ERC20 <-> Non-WETH ERC20\r\n    else {\r\n      console.log(\"SWAP\");\r\n\r\n      console.log(\"------------------ CONSTRUCT TOKEN ------------------\");\r\n      // use WETH for ETHER to work with Uniswap V2 SDK\r\n      const token0 = token0IsETH\r\n        ? WETH[chainId]\r\n        : new Token(chainId, inToken0Address, inToken0Decimal, inToken0Symbol);\r\n      const token1 = token1IsETH\r\n        ? WETH[chainId]\r\n        : new Token(chainId, inToken1Address, inToken1Decimal, inToken1Symbol);\r\n      console.log(token0);\r\n      console.log(token1);\r\n      // quit if the two tokens are equivalent, i.e. have the same chainId and address\r\n      if (token0.equals(token1)) return new ACYSwapErrorStatus(\"Equal tokens!\");\r\n      // helper function from uniswap sdk to get pair address, probably needed if want to replace fetchPairData\r\n      // get pair using our own provider\r\n      console.log(\"------------------ CONSTRUCT PAIR ------------------\");\r\n      console.log(\"FETCH\");\r\n      console.log(pair);\r\n      console.log(\"------------------ CONSTRUCT ROUTE ------------------\");\r\n      // This is where we let Uniswap SDK know we are not using WETH but ETHER\r\n      console.log(route);\r\n      console.log(\"------------------ PARSE AMOUNT ------------------\");\r\n\r\n      console.log(\"------------------ CONSTRUCT TRADE ------------------\");\r\n      console.log(trade);\r\n      console.log(\"------------------ SLIPPAGE CALCULATE ------------------\");\r\n      console.log(slippageAdjustedAmount);\r\n      console.log(minAmountOut);\r\n      console.log(maxAmountIn);\r\n      console.log(\"------------------ ALLOWANCE ------------------\");\r\n      console.log(\"say something about allowance\");\r\n      console.log(\"------------------ PREPARE SWAP ------------------\");\r\n\r\n      let { methodName, args, value } = Router.swapCallParameters(trade, {\r\n        feeOnTransfer: false,\r\n        allowedSlippage,\r\n        recipient: account,\r\n        ttl: 60,\r\n      });\r\n      const options = !value || isZero(value) ? {} : { value };\r\n\r\n      console.log(\"------------------ ARGUMENTS ------------------\");\r\n      console.log(options);\r\n      console.log(args);\r\n\r\n      let result = await contract.estimateGas[methodName](...args, options)\r\n        .then((gasEstimate) => {\r\n          return contract[methodName](...args, {\r\n            gasLimit: calculateGasMargin(gasEstimate),\r\n            ...options,\r\n          });\r\n        })\r\n        .catch((e) => {\r\n          return new ACYSwapErrorStatus(`${methodName} failed with error ${e}`);\r\n        });\r\n      return result;\r\n    }\r\n  })();\r\n  if (status instanceof ACYSwapErrorStatus) {\r\n    setSwapStatus(status.getErrorText());\r\n  } else {\r\n    console.log(status);\r\n    let url = \"https://rinkeby.etherscan.io/tx/\" + status.hash;\r\n    setSwapStatus(\r\n      <div>\r\n        <a href={url} target={\"_blank\"}>\r\n          view it on etherscan\r\n        </a>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst SwapComponent = () => {\r\n  let [token0, setToken0] = useState(null);\r\n  let [token1, setToken1] = useState(null);\r\n  let [token0Balance, setToken0Balance] = useState(\"not know yet\");\r\n  let [token1Balance, setToken1Balance] = useState(\"not know yet\");\r\n  let [token0BalanceShow, setToken0BalanceShow] = useState(false);\r\n  let [token1BalanceShow, setToken1BalanceShow] = useState(false);\r\n  let [token0Amount, setToken0Amount] = useState();\r\n  let [token1Amount, setToken1Amount] = useState();\r\n  let [slippageTolerance, setSlippageTolerance] = useState(\r\n    INITIAL_ALLOWED_SLIPPAGE / 100\r\n  );\r\n  //exactIn = true 在第一行输入\r\n  //exactIn = false 在第二行输入\r\n  let [exactIn, setExactIn] = useState(true);\r\n\r\n  let [needApprove, setNeedApprove] = useState(false);\r\n  let [approveAmount, setApproveAmount] = useState(\"0\");\r\n  let [approveButtonStatus, setApproveButtonStatus] = useState(true);\r\n\r\n  // Breakdown shows the estimated information for swap\r\n\r\n  // let [estimatedStatus,setEstimatedStatus]=useState();\r\n  let [swapBreakdown, setSwapBreakdown] = useState();\r\n  let [swapButtonState, setSwapButtonState] = useState(true);\r\n  let [swapButtonContent, setSwapButtonContent] = useState(\"Connect to Wallet\");\r\n  let [swapStatus, setSwapStatus] = useState();\r\n\r\n  let [pair, setPair] = useState();\r\n  let [route, setRoute] = useState();\r\n  let [trade, setTrade] = useState();\r\n  let [slippageAdjustedAmount, setSlippageAdjustedAmount] = useState();\r\n  let [minAmountOut, setMinAmountOut] = useState();\r\n  let [maxAmountIn, setMaxAmountIn] = useState();\r\n  let [wethContract, setWethContract] = useState();\r\n  let [wrappedAmount, setWrappedAmount] = useState();\r\n\r\n  const individualFieldPlaceholder = \"Enter amount\";\r\n  const dependentFieldPlaceholder = \"Estimated value\";\r\n  const slippageTolerancePlaceholder =\r\n    \"please input a number from 1.00 to 100.00\";\r\n\r\n  const { account, chainId, library, activate } = useWeb3React();\r\n\r\n  const injected = new InjectedConnector({\r\n    supportedChainIds: [1, 3, 4, 5, 42, 80001],\r\n  });\r\n\r\n  // This is to connect wallet.\r\n  useEffect(() => {\r\n    // activate(injected);\r\n  }, []);\r\n\r\n  // token1Amount is changed according to token0Amount\r\n  let t0Changed = useCallback(async () => {\r\n    if (!token0 || !token1) return;\r\n    if (!exactIn) return;\r\n    await swapGetEstimated(\r\n      {\r\n        ...token0,\r\n        amount: token0Amount,\r\n      },\r\n      {\r\n        ...token1,\r\n        amount: token1Amount,\r\n      },\r\n      slippageTolerance * 100,\r\n      exactIn,\r\n      chainId,\r\n      library,\r\n      account,\r\n      setToken0Amount,\r\n      setToken1Amount,\r\n      setNeedApprove,\r\n      setApproveAmount,\r\n      setApproveButtonStatus,\r\n      setSwapBreakdown,\r\n      setSwapButtonState,\r\n      setSwapButtonContent,\r\n      setSwapStatus,\r\n      setPair,\r\n      setRoute,\r\n      setTrade,\r\n      setSlippageAdjustedAmount,\r\n      setMinAmountOut,\r\n      setMaxAmountIn,\r\n      setWethContract,\r\n      setWrappedAmount\r\n    );\r\n  }, [\r\n    token0,\r\n    token1,\r\n    token0Amount,\r\n    token1Amount,\r\n    slippageTolerance,\r\n    exactIn,\r\n    chainId,\r\n    library,\r\n    account,\r\n  ]);\r\n  // token0Amount is changed according to token1Amount\r\n  let t1Changed = useCallback(async () => {\r\n    if (!token0 || !token1) return;\r\n    if (exactIn) return;\r\n    await swapGetEstimated(\r\n      {\r\n        ...token0,\r\n        amount: token0Amount,\r\n      },\r\n      {\r\n        ...token1,\r\n        amount: token1Amount,\r\n      },\r\n      slippageTolerance * 100,\r\n      exactIn,\r\n      chainId,\r\n      library,\r\n      account,\r\n      setToken0Amount,\r\n      setToken1Amount,\r\n      setNeedApprove,\r\n      setApproveAmount,\r\n      setApproveButtonStatus,\r\n      setSwapBreakdown,\r\n      setSwapButtonState,\r\n      setSwapButtonContent,\r\n      setSwapStatus,\r\n      setPair,\r\n      setRoute,\r\n      setTrade,\r\n      setSlippageAdjustedAmount,\r\n      setMinAmountOut,\r\n      setMaxAmountIn,\r\n      setWethContract,\r\n      setWrappedAmount\r\n    );\r\n  }, [\r\n    token0,\r\n    token1,\r\n    token0Amount,\r\n    token1Amount,\r\n    slippageTolerance,\r\n    exactIn,\r\n    chainId,\r\n    library,\r\n    account,\r\n  ]);\r\n  useEffect(() => {\r\n    t0Changed();\r\n  }, [\r\n    token0,\r\n    token1,\r\n    token0Amount,\r\n    token1Amount,\r\n    slippageTolerance,\r\n    exactIn,\r\n    chainId,\r\n    library,\r\n    account,\r\n  ]);\r\n  useEffect(() => {\r\n    t1Changed();\r\n  }, [\r\n    token0,\r\n    token1,\r\n    token0Amount,\r\n    token1Amount,\r\n    slippageTolerance,\r\n    exactIn,\r\n    chainId,\r\n    library,\r\n    account,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    if (account == undefined) {\r\n      setSwapButtonState(true);\r\n      setSwapButtonContent(\"Connect to Wallet\");\r\n    } else {\r\n      setSwapButtonState(false);\r\n      setSwapButtonContent(\"choose tokens and amount\");\r\n    }\r\n  }, [account]);\r\n  return (\r\n    <div>\r\n      <h1>swap</h1>\r\n      <Alert variant=\"success\">\r\n        <Alert.Heading>Hey, nice to see you</Alert.Heading>\r\n        <p>{account}</p>\r\n      </Alert>\r\n      <Form>\r\n        <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\r\n          <Dropdown>\r\n            <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\r\n              {(token0 && token0.symbol) || \"In token\"}\r\n            </Dropdown.Toggle>\r\n            <Dropdown.Menu>\r\n              {supportedTokens.map((token, index) => (\r\n                <Dropdown.Item\r\n                  key={index}\r\n                  onClick={async () => {\r\n                    if (account == undefined) {\r\n                      alert(\"please connect to your account\");\r\n                    } else {\r\n                      setToken0(token);\r\n                      setToken0Balance(\r\n                        await getUserTokenBalance(\r\n                          token,\r\n                          chainId,\r\n                          account,\r\n                          library\r\n                        )\r\n                      );\r\n                      setToken0BalanceShow(true);\r\n                    }\r\n                  }}\r\n                >\r\n                  {token.symbol}\r\n                </Dropdown.Item>\r\n              ))}\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n          <Form.Control\r\n            value={token0Amount}\r\n            placeholder={\r\n              exactIn ? individualFieldPlaceholder : dependentFieldPlaceholder\r\n            }\r\n            onFocus={(e) => {\r\n              setExactIn(true);\r\n            }}\r\n            onChange={(e) => {\r\n              setToken0Amount(e.target.value);\r\n            }}\r\n          />\r\n          {token0BalanceShow ? (\r\n            <small>Balance: {token0Balance}</small>\r\n          ) : (\r\n            <small>not know yet</small>\r\n          )}\r\n        </Form.Group>\r\n        <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\r\n          <Dropdown>\r\n            <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\r\n              {(token1 && token1.symbol) || \"Out token\"}\r\n            </Dropdown.Toggle>\r\n            <Dropdown.Menu>\r\n              {supportedTokens.map((token, index) => (\r\n                <Dropdown.Item\r\n                  key={index}\r\n                  onClick={async () => {\r\n                    if (account == undefined) {\r\n                      alert(\"please connect to your account\");\r\n                    } else {\r\n                      setToken1(token);\r\n                      setToken1Balance(\r\n                        await getUserTokenBalance(\r\n                          token,\r\n                          chainId,\r\n                          account,\r\n                          library\r\n                        )\r\n                      );\r\n                      setToken1BalanceShow(true);\r\n                    }\r\n                  }}\r\n                >\r\n                  {token.symbol}\r\n                </Dropdown.Item>\r\n              ))}\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n          <Form.Control\r\n            value={token1Amount}\r\n            placeholder={\r\n              exactIn ? dependentFieldPlaceholder : individualFieldPlaceholder\r\n            }\r\n            onFocus={(e) => {\r\n              setExactIn(false);\r\n            }}\r\n            onChange={(e) => {\r\n              setToken1Amount(e.target.value);\r\n            }}\r\n          />\r\n          {token1BalanceShow ? (\r\n            <small>Balance: {token1Balance}</small>\r\n          ) : (\r\n            <small>not know yet</small>\r\n          )}\r\n        </Form.Group>\r\n\r\n        <InputGroup size=\"sm\" className=\"mb-3\">\r\n          <InputGroup.Text id=\"inputGroup-sizing-sm\">\r\n            Slippage tolerance{\" \"}\r\n          </InputGroup.Text>\r\n          <FormControl\r\n            aria-label=\"Small\"\r\n            aria-describedby=\"inputGroup-sizing-sm\"\r\n            placeholder={slippageTolerancePlaceholder}\r\n            onChange={(e) => {\r\n              setSlippageTolerance(e.target.value);\r\n            }}\r\n          />\r\n          <InputGroup.Text>%</InputGroup.Text>\r\n        </InputGroup>\r\n\r\n        <Alert variant=\"danger\">\r\n          the Slippage Tolerance you choose is [ {slippageTolerance}% ]\r\n        </Alert>\r\n\r\n        <Alert variant=\"info\">\r\n          {swapBreakdown && <mark> Swap breakdown:</mark>}\r\n          {swapBreakdown && swapBreakdown.map((info) => <p>{info}</p>)}\r\n        </Alert>\r\n        {needApprove == true && (\r\n          <mark>\r\n            <Button\r\n              variant=\"warning\"\r\n              onClick={async () => {\r\n                let state = await approve(\r\n                  token0.address,\r\n                  approveAmount,\r\n                  library,\r\n                  account\r\n                );\r\n                if (state == true) {\r\n                  setSwapButtonState(true);\r\n                  setSwapButtonContent(\"SWAP\");\r\n                  setApproveButtonStatus(false);\r\n                }\r\n              }}\r\n              disabled={!approveButtonStatus}\r\n            >\r\n              Approve\r\n            </Button>{\" \"}\r\n          </mark>\r\n        )}\r\n\r\n        <Button\r\n          variant=\"success\"\r\n          disabled={!swapButtonState}\r\n          onClick={() => {\r\n            if (account == undefined) {\r\n              activate(injected);\r\n            } else {\r\n              swap(\r\n                {\r\n                  ...token0,\r\n                  amount: token0Amount,\r\n                },\r\n                {\r\n                  ...token1,\r\n                  amount: token1Amount,\r\n                },\r\n                slippageTolerance * 100,\r\n                exactIn,\r\n                chainId,\r\n                library,\r\n                account,\r\n                pair,\r\n                route,\r\n                trade,\r\n                slippageAdjustedAmount,\r\n                minAmountOut,\r\n                maxAmountIn,\r\n                wethContract,\r\n                wrappedAmount,\r\n                setSwapStatus\r\n              );\r\n            }\r\n          }}\r\n        >\r\n          {swapButtonContent}\r\n        </Button>\r\n        <Alert variant=\"primary\">\r\n          {swapStatus && <mark> swapStatus:</mark>}\r\n          {swapStatus && <p> {swapStatus}</p>}\r\n        </Alert>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SwapComponent;\r\n","import React from \"react\";\r\nimport { Web3ReactProvider } from \"@web3-react/core\";\r\nimport { Web3Provider } from \"@ethersproject/providers\";\r\nimport SwapComponent from \"./SwapComponent\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./styles/Home.css\";\r\n\r\nfunction getLibrary(provider, connector) {\r\n  return new Web3Provider(provider); // this will vary according to whether you use e.g. ethers or web3.js\r\n}\r\nfunction Home() {\r\n  return (\r\n    <div className=\"home__body\">\r\n      <Web3ReactProvider getLibrary={getLibrary}>\r\n        <div\r\n          className=\"Transaction\"\r\n          style={{ \"padding-left\": \"15%\", \"padding-right\": \"15%\" }}\r\n        >\r\n          <SwapComponent />\r\n        </div>\r\n      </Web3ReactProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\n\r\nimport { Web3ReactProvider } from \"@web3-react/core\";\r\nimport { Web3Provider } from \"@ethersproject/providers\";\r\nimport SwapComponent from \"./SwapComponent\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./styles/Transaction.css\";\r\n\r\nfunction getLibrary(provider, connector) {\r\n  return new Web3Provider(provider); // this will vary according to whether you use e.g. ethers or web3.js\r\n}\r\nfunction Transaction() {\r\n  return (\r\n    <Web3ReactProvider getLibrary={getLibrary}>\r\n      <div\r\n        className=\"Transaction\"\r\n        style={{ \"padding-left\": \"15%\", \"padding-right\": \"15%\" }}\r\n      >\r\n        <SwapComponent />\r\n      </div>\r\n    </Web3ReactProvider>\r\n  );\r\n}\r\n\r\nexport default Transaction;\r\n","import {useWeb3React} from \"@web3-react/core\";\r\nimport {InjectedConnector} from \"@web3-react/injected-connector\";\r\nimport {useCallback, useEffect, useState} from \"react\";\r\nimport {\r\n    ACYSwapErrorStatus,\r\n    approve,\r\n    calculateGasMargin,\r\n    calculateSlippageAmount,\r\n    checkTokenIsApproved,\r\n    getRouterContract,\r\n    getTokenTotalSupply,\r\n    getUserTokenBalance,\r\n    getUserTokenBalanceRaw,\r\n    INITIAL_ALLOWED_SLIPPAGE,\r\n    supportedTokens,\r\n} from \"../utils\";\r\n\r\nimport {Alert, Button, Dropdown, Form, FormControl, InputGroup} from \"react-bootstrap\";\r\nimport {\r\n    CurrencyAmount,\r\n    ETHER,\r\n    FACTORY_ADDRESS,\r\n    Fetcher,\r\n    InsufficientReservesError,\r\n    Percent,\r\n    Token,\r\n    TokenAmount,\r\n    WETH,\r\n} from \"@uniswap/sdk\";\r\nimport {BigNumber} from \"@ethersproject/bignumber\";\r\nimport {parseUnits} from \"@ethersproject/units\";\r\n\r\n\r\n// get the estimated amount of the other token required when adding liquidity, in readable string.\r\nexport async function getEstimated(\r\n    inputToken0,\r\n    inputToken1,\r\n    allowedSlippage = INITIAL_ALLOWED_SLIPPAGE,\r\n    exactIn = true,\r\n    chainId,\r\n    library,\r\n    account,\r\n    setToken0Amount,\r\n    setToken1Amount,\r\n    setNeedApproveToken0,\r\n    setNeedApproveToken1,\r\n    setApproveAmountToken0,\r\n    setApproveAmountToken1,\r\n    setApproveToken0ButtonShow,\r\n    setApproveToken1ButtonShow,\r\n    setLiquidityBreakdown,\r\n    setButtonContent,\r\n    setButtonStatus,\r\n    setLiquidityStatus,\r\n    setPair,\r\n    setNoLiquidity,\r\n    setParsedToken0Amount,\r\n    setParsedToken1Amount,\r\n    setArgs,\r\n    setValue\r\n) {\r\n    let status = await (async () => {\r\n        setNeedApproveToken0(false);\r\n        setNeedApproveToken1(false);\r\n        setApproveAmountToken0(\"0\");\r\n        setApproveAmountToken1(\"0\");\r\n        setApproveToken0ButtonShow(false);\r\n        setApproveToken1ButtonShow(false);\r\n        setLiquidityBreakdown(\"\");\r\n        setButtonContent(\"loading...\");\r\n        setButtonStatus(false);\r\n        setLiquidityStatus(\"\");\r\n\r\n        console.log(FACTORY_ADDRESS);\r\n\r\n        let router = getRouterContract(library, account);\r\n        let slippage = allowedSlippage * 0.01;\r\n        let {\r\n            address: inToken0Address,\r\n            symbol: inToken0Symbol,\r\n            decimal: inToken0Decimal,\r\n            amount: inToken0Amount,\r\n        } = inputToken0;\r\n        let {\r\n            address: inToken1Address,\r\n            symbol: inToken1Symbol,\r\n            decimal: inToken1Decimal,\r\n            amount: inToken1Amount,\r\n        } = inputToken1;\r\n\r\n        if (!inputToken0.symbol || !inputToken1.symbol)\r\n            return new ACYSwapErrorStatus(\"please choose tokens\");\r\n        if (exactIn && inToken0Amount == \"0\")\r\n            return new ACYSwapErrorStatus(\"token0Amount is 0\");\r\n        if (!exactIn && inToken1Amount == \"0\")\r\n            return new ACYSwapErrorStatus(\"token1Amount is 0\");\r\n        if (exactIn && inToken0Amount == \"\")\r\n            return new ACYSwapErrorStatus(\"token0Amount is \\\"\\\"\");\r\n        if (!exactIn && inToken1Amount == \"\")\r\n            return new ACYSwapErrorStatus(\"token1Amount is \\\"\\\"\");\r\n        if (exactIn && (isNaN(parseFloat(inToken0Amount))))\r\n            return new ACYSwapErrorStatus(\"token0Amount is NaN\");\r\n        if (!exactIn && (isNaN(parseFloat(inToken1Amount))))\r\n            return new ACYSwapErrorStatus(\"token1Amount is NaN\");\r\n\r\n        let token0IsETH = inToken0Symbol === \"ETH\";\r\n        let token1IsETH = inToken1Symbol === \"ETH\";\r\n\r\n        console.log(inputToken0);\r\n        console.log(inputToken1);\r\n        if (token0IsETH && token1IsETH) {\r\n            setButtonContent(\"Doesn't support ETH to ETH\");\r\n            setButtonStatus(false);\r\n            return new ACYSwapErrorStatus(\"Doesn't support ETH to ETH\");\r\n        } else if (\r\n            (token0IsETH && inToken1Symbol === \"WETH\") ||\r\n            (inToken0Symbol === \"WETH\" && token1IsETH)\r\n        ) {\r\n            setButtonContent(\"Invalid pair WETH/ETH\");\r\n            setButtonStatus(false);\r\n            return new ACYSwapErrorStatus(\"Invalid pair WETH/ETH\");\r\n        }\r\n        // ETH <-> Non-WETH ERC20     OR     Non-WETH ERC20 <-> Non-WETH ERC20\r\n        else {\r\n            console.log(\"ADD LIQUIDITY\");\r\n            console.log(\"------------------ CONSTRUCT TOKEN ------------------\");\r\n\r\n            // use WETH for ETHER to work with Uniswap V2 SDK\r\n            const token0 = token0IsETH\r\n                ? WETH[chainId]\r\n                : new Token(chainId, inToken0Address, inToken0Decimal, inToken0Symbol);\r\n            const token1 = token1IsETH\r\n                ? WETH[chainId]\r\n                : new Token(chainId, inToken1Address, inToken1Decimal, inToken1Symbol);\r\n\r\n            if (token0.equals(token1)) {\r\n                setButtonContent(\"Equal tokens\");\r\n                setButtonStatus(false);\r\n                return new ACYSwapErrorStatus(\"Equal tokens!\");\r\n            }\r\n            // get pair using our own provider\r\n            const pair = await Fetcher.fetchPairData(token0, token1, library)\r\n                .then((pair) => {\r\n                    console.log(pair.reserve0.raw.toString());\r\n                    console.log(pair.reserve1.raw.toString());\r\n                    return pair;\r\n                })\r\n                .catch((e) => {\r\n                    return new ACYSwapErrorStatus(\r\n                        `${token0.symbol} - ${token1.symbol} pool does not exist. Create one?`\r\n                    );\r\n                });\r\n\r\n            console.log(\"pair\");\r\n            console.log(pair);\r\n            setPair(pair);\r\n\r\n\r\n            let noLiquidity = false;\r\n            if (pair instanceof ACYSwapErrorStatus) {\r\n                noLiquidity = true;\r\n            }\r\n            setNoLiquidity(noLiquidity);\r\n            console.log(\"------------------ PARSE AMOUNT ------------------\");\r\n            // convert typed in amount to BigNumber using ethers.js's parseUnits,\r\n\r\n            let parsedAmount;\r\n            try {\r\n                parsedAmount = exactIn\r\n                    ? new TokenAmount(token0, parseUnits(inToken0Amount, inToken0Decimal))\r\n                    : new TokenAmount(token1, parseUnits(inToken1Amount, inToken1Decimal));\r\n\r\n            } catch (e) {\r\n                console.log(\"parsedAmount\");\r\n                console.log(e);\r\n                setButtonStatus(false);\r\n                if (e.fault === \"underflow\"){\r\n                    setButtonContent(e.fault);\r\n                    return new ACYSwapErrorStatus(e.fault);\r\n                }else {\r\n                    setButtonContent(\"unknow error\");\r\n                    return new ACYSwapErrorStatus(\"unknow error\");\r\n                }\r\n            }\r\n\r\n            let parsedToken0Amount;\r\n            let parsedToken1Amount;\r\n\r\n            // this is have pool\r\n            if (!noLiquidity) {\r\n                console.log(\"estimated dependent amount\");\r\n                let dependentTokenAmount;\r\n                if (exactIn) {\r\n                    dependentTokenAmount = pair.priceOf(token0).quote(parsedAmount);\r\n\r\n\r\n                    let token0TokenAmount;\r\n                    try {\r\n                        token0TokenAmount = new TokenAmount(\r\n                            token0,\r\n                            parseUnits(inToken0Amount, inToken0Decimal)\r\n                        );\r\n                    } catch (e) {\r\n                        console.log(\"token0TokenAmount\");\r\n                        console.log(e);\r\n                        setButtonStatus(false);\r\n                        if (e.fault === \"underflow\"){\r\n                            setButtonContent(e.fault);\r\n                            return new ACYSwapErrorStatus(e.fault);\r\n                        }else {\r\n                            setButtonContent(\"unknow error\");\r\n                            return new ACYSwapErrorStatus(\"unknow error\");\r\n                        }\r\n                    }\r\n\r\n                    parsedToken0Amount =\r\n                        token0 === ETHER\r\n                            ? CurrencyAmount.ether(token0TokenAmount.raw)\r\n                            : token0TokenAmount;\r\n\r\n                    parsedToken1Amount =\r\n                        token1 === ETHER\r\n                            ? CurrencyAmount.ether(dependentTokenAmount.raw)\r\n                            : dependentTokenAmount;\r\n                    setToken1Amount(dependentTokenAmount.toExact());\r\n                    inToken1Amount = dependentTokenAmount.toExact();\r\n                } else {\r\n                    dependentTokenAmount = pair.priceOf(token1).quote(parsedAmount);\r\n\r\n                    let token1TokenAmount;\r\n                    try{\r\n                        token1TokenAmount = new TokenAmount(\r\n                            token1,\r\n                            parseUnits(inToken1Amount, inToken1Decimal)\r\n                        );\r\n                    }catch(e){\r\n                        console.log(\"token0TokenAmount\");\r\n                        console.log(e);\r\n                        setButtonStatus(false);\r\n                        if (e.fault === \"underflow\"){\r\n                            setButtonContent(e.fault);\r\n                            return new ACYSwapErrorStatus(e.fault);\r\n                        }else {\r\n                            setButtonContent(\"unknow error\");\r\n                            return new ACYSwapErrorStatus(\"unknow error\");\r\n                        }\r\n                    }\r\n\r\n\r\n                    parsedToken0Amount =\r\n                        token0 === ETHER\r\n                            ? CurrencyAmount.ether(dependentTokenAmount.raw)\r\n                            : dependentTokenAmount;\r\n\r\n                    parsedToken1Amount =\r\n                        token1 === ETHER\r\n                            ? CurrencyAmount.ether(token1TokenAmount.raw)\r\n                            : token1TokenAmount;\r\n                    setToken0Amount(dependentTokenAmount.toExact());\r\n                    inToken0Amount = dependentTokenAmount.toExact();\r\n                }\r\n            } else {\r\n                // this is to create new pools\r\n                if (inToken0Amount === \"0\" || inToken1Amount === \"0\") {\r\n                    if (noLiquidity) {\r\n                        setButtonStatus(false);\r\n                        setButtonContent(\"create new pool\");\r\n\r\n                        return new ACYSwapErrorStatus(\r\n                            \"Creating a new pool, please enter both amounts\"\r\n                        );\r\n                    } else {\r\n                        setButtonStatus(false);\r\n                        setButtonContent(\"add liquidity\");\r\n                        return new ACYSwapErrorStatus(\r\n                            \"One field is empty, it's probably a new pool\"\r\n                        );\r\n                    }\r\n                }\r\n\r\n                try{\r\n                    parsedToken0Amount = new TokenAmount(\r\n                        token0,\r\n                        parseUnits(inToken0Amount, inToken0Decimal)\r\n                    );\r\n\r\n                    parsedToken1Amount = new TokenAmount(\r\n                        token1,\r\n                        parseUnits(inToken1Amount, inToken1Decimal)\r\n                    );\r\n                } catch(e) {\r\n                    console.log(\"parsedToken0Amount and parsedToken1Amount\");\r\n                    console.log(e);\r\n                    setButtonStatus(false);\r\n                    if (e.fault === \"underflow\") {\r\n                        setButtonContent(e.fault);\r\n                        return new ACYSwapErrorStatus(e.fault);\r\n                    } else {\r\n                        setButtonContent(\"unknow error\");\r\n                        return new ACYSwapErrorStatus(\"unknow error\");\r\n                    }\r\n                }\r\n            }\r\n            setParsedToken0Amount(parsedToken0Amount);\r\n            setParsedToken1Amount(parsedToken1Amount);\r\n\r\n            // check user account balance\r\n            console.log(\"------------------ CHECK BALANCE ------------------\");\r\n            let userToken0Balance = await getUserTokenBalanceRaw(\r\n                token0IsETH\r\n                    ? ETHER\r\n                    : new Token(chainId, inToken0Address, inToken0Decimal, inToken0Symbol),\r\n                account,\r\n                library\r\n            );\r\n\r\n            let userToken1Balance = await getUserTokenBalanceRaw(\r\n                token1IsETH\r\n                    ? ETHER\r\n                    : new Token(chainId, inToken1Address, inToken1Decimal, inToken1Symbol),\r\n                account,\r\n                library\r\n            );\r\n\r\n            console.log(\"token0 balance\");\r\n            console.log(userToken0Balance);\r\n\r\n            console.log(\"token1 balance\");\r\n            console.log(userToken1Balance);\r\n\r\n            let userHasSufficientBalance;\r\n            try {\r\n                userHasSufficientBalance =\r\n                    userToken0Balance.gte(parseUnits(inToken0Amount, inToken0Decimal)) &&\r\n                    userToken1Balance.gte(parseUnits(inToken1Amount, inToken1Decimal));\r\n            }catch(e){\r\n                console.log(userHasSufficientBalance);\r\n                console.log(e);\r\n                setButtonStatus(false);\r\n                if (e.fault === \"underflow\") {\r\n                    setButtonContent(e.fault);\r\n                    return new ACYSwapErrorStatus(e.fault);\r\n                } else {\r\n                    setButtonContent(\"unknow error\");\r\n                    return new ACYSwapErrorStatus(\"unknow error\");\r\n                }\r\n\r\n            }\r\n\r\n            // quit if user doesn't have enough balance, otherwise this will cause error\r\n            if (!userHasSufficientBalance) {\r\n                setButtonContent(\"Not enough balance\");\r\n                setButtonStatus(false);\r\n                return new ACYSwapErrorStatus(\"Not enough balance\");\r\n            }\r\n\r\n\r\n            console.log(\"------------------ BREAKDOWN ------------------\");\r\n            if (!noLiquidity) {\r\n                let totalSupply = await getTokenTotalSupply(\r\n                    pair.liquidityToken,\r\n                    library,\r\n                    account\r\n                );\r\n                console.log(\"Liquidity Minted\");\r\n                console.log(pair.liquidityToken);\r\n\r\n                try {\r\n                    let liquidityMinted = pair.getLiquidityMinted(\r\n                        totalSupply,\r\n                        parsedToken0Amount,\r\n                        parsedToken1Amount\r\n                    );\r\n                    let poolTokenPercentage = new Percent(\r\n                        liquidityMinted.raw,\r\n                        totalSupply.add(liquidityMinted).raw\r\n                    ).toFixed(4);\r\n\r\n                    setLiquidityBreakdown([\r\n                        `Slippage tolerance : ${slippage}%`,\r\n                        `Pool reserve: ${pair.reserve0.toExact()} ${\r\n                            pair.token0.symbol\r\n                        } + ${pair.reserve1.toExact()} ${pair.token1.symbol}`,\r\n                        `Pool share: ${poolTokenPercentage}%`,\r\n                        `${token0.symbol}: ${parsedToken0Amount.toExact()}`,\r\n                        `${token1.symbol}: ${parsedToken1Amount.toExact()}`,\r\n                        // noLiquidity ? \"100\" : `${poolTokenPercentage?.toSignificant(4)}} %`,\r\n                    ]);\r\n\r\n                } catch (e) {\r\n                    if (e instanceof InsufficientReservesError) {\r\n                        setButtonContent(\"Insufficient reserve!\");\r\n                        setButtonStatus(false);\r\n                        // alert(\"something wrong !!!!\");\r\n                        return new ACYSwapErrorStatus(\"Insufficient reserve!\");\r\n                        console.log(\"Insufficient reserve!\");\r\n                    } else {\r\n                        setButtonContent(\"Unhandled exception!\");\r\n                        setButtonStatus(false);\r\n                        return new ACYSwapErrorStatus(\"Unhandled exception!\");\r\n                        console.log(\"Unhandled exception!\");\r\n                        console.log(e);\r\n                    }\r\n                }\r\n            } else {\r\n                setLiquidityBreakdown([\"new pool\"]);\r\n            }\r\n            console.log(\"------------------ ALLOWANCE ------------------\");\r\n            let approveStatus = 0;\r\n            if (!token0IsETH) {\r\n                let token0approval = await checkTokenIsApproved(\r\n                    inToken0Address,\r\n                    parsedToken0Amount.raw.toString(),\r\n                    library,\r\n                    account\r\n                );\r\n                console.log(\"token 0 approved?\");\r\n                console.log(token0approval);\r\n\r\n                if (!token0approval) {\r\n                    console.log(\"Not enough allowance\");\r\n                    setApproveAmountToken0(parsedToken0Amount.raw.toString());\r\n                    setNeedApproveToken0(true);\r\n                    setApproveToken0ButtonShow(true);\r\n                    approveStatus += 1;\r\n                }\r\n            }\r\n            if (!token1IsETH) {\r\n                console.log(\r\n                    `Inside addLiquidity, amount needed: ${parsedToken1Amount.raw.toString()}`\r\n                );\r\n                let token1approval = await checkTokenIsApproved(\r\n                    inToken1Address,\r\n                    parsedToken1Amount.raw.toString(),\r\n                    library,\r\n                    account\r\n                );\r\n                console.log(\"token 1 approved?\");\r\n                console.log(token1approval);\r\n\r\n                if (!token1approval) {\r\n                    console.log(\"Not enough allowance for token1\");\r\n                    setApproveAmountToken1(parsedToken1Amount.raw.toString());\r\n                    setNeedApproveToken1(true);\r\n                    setApproveToken1ButtonShow(true);\r\n                    approveStatus += 2;\r\n                }\r\n            }\r\n            if (approveStatus > 0) {\r\n                setButtonStatus(false);\r\n                setButtonContent(\"need approve\");\r\n\r\n                return new ACYSwapErrorStatus(\r\n                    `Need approve ${\r\n                        approveStatus === 1\r\n                            ? inToken0Symbol\r\n                            : approveStatus === 2\r\n                                ? inToken1Symbol\r\n                                : `${inToken0Symbol} and ${inToken1Symbol}`\r\n                    }`\r\n                );\r\n            }\r\n            setButtonStatus(true);\r\n            if (noLiquidity) {\r\n                setButtonContent(\"create a new pool\");\r\n            } else {\r\n                setButtonContent(\"add liquidity\");\r\n            }\r\n\r\n            console.log(\r\n                \"------------------ PREPARE ADD LIQUIDITY ------------------\"\r\n            );\r\n            console.log(\"parsed token 0 amount\");\r\n            console.log(parsedToken0Amount.raw);\r\n            console.log(\"parsed token 1 amount\");\r\n            console.log(parsedToken1Amount.raw);\r\n            console.log(\"slippage\");\r\n            console.log(allowedSlippage);\r\n\r\n\r\n            let estimate;\r\n            let method;\r\n            let args;\r\n            let value;\r\n\r\n\r\n            if (token0IsETH || token1IsETH) {\r\n                estimate = router.estimateGas.addLiquidityETH;\r\n                method = router.addLiquidityETH;\r\n                let nonETHToken = token0IsETH ? token1 : token0;\r\n\r\n                let parsedNonETHTokenAmount = token0IsETH\r\n                    ? parsedToken1Amount\r\n                    : parsedToken0Amount;\r\n\r\n                let minETH = token0IsETH\r\n                    ? calculateSlippageAmount(\r\n                        parsedToken0Amount,\r\n                        noLiquidity ? 0 : allowedSlippage\r\n                    )[0].toString()\r\n                    : calculateSlippageAmount(\r\n                        parsedToken1Amount,\r\n                        noLiquidity ? 0 : allowedSlippage\r\n                    )[0].toString();\r\n\r\n                args = [\r\n                    nonETHToken.address,\r\n                    parsedNonETHTokenAmount.raw.toString(),\r\n                    calculateSlippageAmount(\r\n                        parsedNonETHTokenAmount,\r\n                        noLiquidity ? 0 : allowedSlippage\r\n                    )[0].toString(),\r\n                    minETH,\r\n                    account,\r\n                    `0x${(Math.floor(new Date().getTime() / 1000) + 60).toString(16)}`,\r\n                ];\r\n                value = BigNumber.from(\r\n                    (token1IsETH ? parsedToken1Amount : parsedToken0Amount).raw.toString()\r\n                );\r\n                console.log(value);\r\n            } else {\r\n                estimate = router.estimateGas.addLiquidity;\r\n                method = router.addLiquidity;\r\n                args = [\r\n                    inToken0Address,\r\n                    inToken1Address,\r\n                    parsedToken0Amount.raw.toString(),\r\n                    parsedToken1Amount.raw.toString(),\r\n                    calculateSlippageAmount(\r\n                        parsedToken0Amount,\r\n                        noLiquidity ? 0 : allowedSlippage\r\n                    )[0].toString(),\r\n                    calculateSlippageAmount(\r\n                        parsedToken1Amount,\r\n                        noLiquidity ? 0 : allowedSlippage\r\n                    )[0].toString(),\r\n                    account,\r\n                    `0x${(Math.floor(new Date().getTime() / 1000) + 60).toString(16)}`,\r\n                ];\r\n                value = null;\r\n            }\r\n            console.log(\"args\");\r\n            console.log(args);\r\n            console.log(\"estimate\");\r\n            console.log(estimate);\r\n            console.log(\"method\");\r\n            console.log(method);\r\n            console.log(\"value\");\r\n            console.log(value);\r\n\r\n            setArgs(args);\r\n            setValue(value);\r\n\r\n\r\n        }//  end of\r\n        // ETH <-> Non-WETH ERC20     OR     Non-WETH ERC20 <-> Non-WETH ERC20\r\n    })();\r\n\r\n    if (status instanceof ACYSwapErrorStatus) {\r\n        console.log(status.getErrorText());\r\n    } else {\r\n        console.log(status);\r\n    }\r\n}\r\n\r\nexport async function addLiquidity(\r\n    inputToken0,\r\n    inputToken1,\r\n    allowedSlippage = INITIAL_ALLOWED_SLIPPAGE,\r\n    exactIn = true,\r\n    chainId,\r\n    library,\r\n    account,\r\n    pair,\r\n    noLiquidity,\r\n    parsedToken0Amount,\r\n    parsedToken1Amount,\r\n    args,\r\n    value,\r\n    setLiquidityStatus\r\n) {\r\n    let status = await (async () => {\r\n        // check uniswap\r\n        console.log(FACTORY_ADDRESS);\r\n        let router = getRouterContract(library, account);\r\n\r\n        const {\r\n            address: inToken0Address,\r\n            symbol: inToken0Symbol,\r\n            decimal: inToken0Decimal,\r\n            amount: inToken0Amount,\r\n        } = inputToken0;\r\n        const {\r\n            address: inToken1Address,\r\n            symbol: inToken1Symbol,\r\n            decimal: inToken1Decimal,\r\n            amount: inToken1Amount,\r\n        } = inputToken1;\r\n\r\n        let token0IsETH = inToken0Symbol === \"ETH\";\r\n        let token1IsETH = inToken1Symbol === \"ETH\";\r\n\r\n\r\n        console.log(\"------------------ RECEIVED TOKEN ------------------\");\r\n        console.log(\"token0\");\r\n        console.log(inputToken0);\r\n        console.log(\"token1\");\r\n        console.log(inputToken1);\r\n\r\n        if (token0IsETH && token1IsETH)\r\n            return new ACYSwapErrorStatus(\"Doesn't support ETH to ETH\");\r\n\r\n        if (\r\n            (token0IsETH && inToken1Symbol === \"WETH\") ||\r\n            (inToken0Symbol === \"WETH\" && token1IsETH)\r\n        ) {\r\n            // UI should sync value of ETH and WETH\r\n            return new ACYSwapErrorStatus(\"Invalid pair WETH/ETH\");\r\n        }\r\n        // ETH <-> Non-WETH ERC20     OR     Non-WETH ERC20 <-> Non-WETH ERC20\r\n        else {\r\n            console.log(\"ADD LIQUIDITY\");\r\n            console.log(\"------------------ CONSTRUCT TOKEN ------------------\");\r\n            // use WETH for ETHER to work with Uniswap V2 SDK\r\n            const token0 = token0IsETH\r\n                ? WETH[chainId]\r\n                : new Token(chainId, inToken0Address, inToken0Decimal, inToken0Symbol);\r\n            const token1 = token1IsETH\r\n                ? WETH[chainId]\r\n                : new Token(chainId, inToken1Address, inToken1Decimal, inToken1Symbol);\r\n\r\n            // quit if the two tokens are equivalent, i.e. have the same chainId and address\r\n            if (token0.equals(token1)) return new ACYSwapErrorStatus(\"Equal tokens!\");\r\n\r\n\r\n            // get pair using our own provider\r\n            console.log(\"------------------ CONSTRUCT PAIR ------------------\");\r\n            console.log(\"FETCH pair\");\r\n            // if an error occurs, because pair doesn't exists\r\n            console.log(pair);\r\n            console.log(noLiquidity);\r\n            console.log(\"------------------ PARSE AMOUNT ------------------\");\r\n            console.log(parsedToken0Amount);\r\n            console.log(parsedToken1Amount);\r\n            console.log(\"------------------ CHECK BALANCE ------------------\");\r\n            console.log(\"------------------ BREAKDOWN ------------------\");\r\n            console.log(\"------------------ ALLOWANCE ------------------\");\r\n            console.log(\"------------------ PREPARE ADD LIQUIDITY ------------------\");\r\n            let estimate;\r\n            let method;\r\n            if (token0IsETH || token1IsETH) {\r\n                estimate = router.estimateGas.addLiquidityETH;\r\n                method = router.addLiquidityETH;\r\n                console.log(args);\r\n                console.log(value);\r\n            } else {\r\n                estimate = router.estimateGas.addLiquidity;\r\n                method = router.addLiquidity;\r\n                console.log(args);\r\n                console.log(value);\r\n            }\r\n\r\n            setLiquidityStatus(\"Processing add liquidity request\");\r\n            console.log(\"parsed token 0 amount\");\r\n            console.log(parsedToken0Amount.raw);\r\n            console.log(\"parsed token 1 amount\");\r\n            console.log(parsedToken1Amount.raw);\r\n            console.log(\"slippage\");\r\n            console.log(allowedSlippage);\r\n\r\n            console.log(estimate);\r\n            console.log(method);\r\n            console.log(args);\r\n            console.log(value);\r\n\r\n            let result = await estimate(...args, value ? {value} : {}).then(\r\n                (estimatedGasLimit) =>\r\n                    method(...args, {\r\n                        ...(value ? {value} : {}),\r\n                        gasLimit: calculateGasMargin(estimatedGasLimit),\r\n                    }).catch((e) => {\r\n                        return new ACYSwapErrorStatus(\"Error in transaction\");\r\n                    })\r\n            );\r\n            return result;\r\n        }\r\n    })();\r\n    if (status instanceof ACYSwapErrorStatus) {\r\n        setLiquidityStatus(status.getErrorText());\r\n    } else {\r\n        console.log(\"status\");\r\n        console.log(status);\r\n        let url = \"https://rinkeby.etherscan.io/tx/\" + status.hash;\r\n        setLiquidityStatus(<a href={url} target={\"_blank\"}>view it on etherscan</a>);\r\n    }\r\n    return;\r\n}\r\n\r\n// expects at least has WETH as one of the tokens\r\nexport async function getAllLiquidityPositions(tokens, chainId, library, account) {\r\n    // we only want WETH\r\n    tokens = tokens.filter((token) => token.symbol !== \"ETH\");\r\n\r\n    let totalTokenCount = tokens.length;\r\n    let userNonZeroLiquidityPositions = [];\r\n\r\n    if (totalTokenCount === 1) return;\r\n\r\n    let checkLiquidityPositionTasks = [];\r\n\r\n    for (let i = 0; i < totalTokenCount; i++) {\r\n        for (let j = i + 1; j < totalTokenCount; j++) {\r\n            const {\r\n                address: token0Address,\r\n                symbol: token0Symbol,\r\n                decimal: token0Decimal,\r\n            } = tokens[i];\r\n            const {\r\n                address: token1Address,\r\n                symbol: token1Symbol,\r\n                decimal: token1Decimal,\r\n            } = tokens[j];\r\n\r\n            const token0 = new Token(\r\n                chainId,\r\n                token0Address,\r\n                token0Decimal,\r\n                token0Symbol\r\n            );\r\n            const token1 = new Token(\r\n                chainId,\r\n                token1Address,\r\n                token1Decimal,\r\n                token1Symbol\r\n            );\r\n\r\n            // quit if the two tokens are equivalent, i.e. have the same chainId and address\r\n            if (token0.equals(token1)) continue;\r\n\r\n            // queue get pair task\r\n            const pairTask = Fetcher.fetchPairData(token0, token1, library);\r\n            checkLiquidityPositionTasks.push(pairTask);\r\n        }\r\n    }\r\n\r\n    let pairs = await Promise.allSettled(checkLiquidityPositionTasks);\r\n\r\n    // now we process the pairs\r\n    for (let pair of pairs) {\r\n        if (pair.status === \"rejected\") continue;\r\n\r\n        pair = pair.value;\r\n\r\n        let userPoolBalance = await getUserTokenBalanceRaw(\r\n            pair.liquidityToken,\r\n            account,\r\n            library\r\n        );\r\n\r\n        if (userPoolBalance.isZero()) continue;\r\n\r\n        userPoolBalance = new TokenAmount(pair.liquidityToken, userPoolBalance);\r\n\r\n        let totalPoolTokens = await getTokenTotalSupply(\r\n            pair.liquidityToken,\r\n            library,\r\n            account\r\n        );\r\n\r\n        let token0Deposited = pair.getLiquidityValue(\r\n            pair.token0,\r\n            totalPoolTokens,\r\n            userPoolBalance,\r\n            false\r\n        );\r\n        let token1Deposited = pair.getLiquidityValue(\r\n            pair.token1,\r\n            totalPoolTokens,\r\n            userPoolBalance,\r\n            false\r\n        );\r\n\r\n        let totalSupply = await getTokenTotalSupply(\r\n            pair.liquidityToken,\r\n            library,\r\n            account\r\n        );\r\n\r\n        // let liquidityMinted = pair.getLiquidityMinted(\r\n        //     totalSupply,\r\n        //     token0Deposited,\r\n        //     token1Deposited\r\n        // );\r\n\r\n        let poolTokenPercentage = new Percent(\r\n            userPoolBalance.raw,\r\n            totalSupply.raw\r\n        ).toFixed(4);\r\n\r\n        userNonZeroLiquidityPositions.push({\r\n            pool: `${pair.token0.symbol}/${pair.token1.symbol}`,\r\n            token0Amount: `${token0Deposited.toSignificant(6)} ${pair.token0.symbol}`,\r\n            token1Amount: `${token1Deposited.toSignificant(6)} ${pair.token1.symbol}`,\r\n            token0Reserve: `${pair.reserve0.toExact()} ${pair.token0.symbol}`,\r\n            token1Reserve: `${pair.reserve1.toExact()} ${pair.token1.symbol}`,\r\n            share: `${poolTokenPercentage}%`,\r\n        });\r\n    }\r\n\r\n    console.log(\"token pairs that user has positions:\");\r\n    console.log(userNonZeroLiquidityPositions);\r\n    return userNonZeroLiquidityPositions;\r\n}\r\n\r\nconst LiquidityComponent = () => {\r\n    let [token0, setToken0] = useState(null);\r\n    let [token1, setToken1] = useState(null);\r\n    let [token0Balance, setToken0Balance] = useState(\"not know yet\");\r\n    let [token1Balance, setToken1Balance] = useState(\"not know yet\");\r\n    let [token0Amount, setToken0Amount] = useState(\"0\");\r\n    let [token1Amount, setToken1Amount] = useState(\"0\");\r\n    let [token0BalanceShow, setToken0BalanceShow] = useState(false);\r\n    let [token1BalanceShow, setToken1BalanceShow] = useState(false);\r\n\r\n    // true 指前面的，false指后面的\r\n    let [exactIn, setExactIn] = useState(true);\r\n    let [slippageTolerance, setSlippageTolerance] = useState(INITIAL_ALLOWED_SLIPPAGE / 100);\r\n\r\n    let [needApproveToken0, setNeedApproveToken0] = useState(false);\r\n    let [needApproveToken1, setNeedApproveToken1] = useState(false);\r\n    let [approveAmountToken0, setApproveAmountToken0] = useState(\"0\");\r\n    let [approveAmountToken1, setApproveAmountToken1] = useState(\"0\");\r\n\r\n    let [approveToken0ButtonShow, setApproveToken0ButtonShow] = useState(false);\r\n    let [approveToken1ButtonShow, setApproveToken1ButtonShow] = useState(false);\r\n\r\n\r\n    let [liquidityBreakdown, setLiquidityBreakdown] = useState();\r\n    let [buttonContent, setButtonContent] = useState(\"connect to wallet\");\r\n    let [buttonStatus, setButtonStatus] = useState(true);\r\n    let [liquidityStatus, setLiquidityStatus] = useState();\r\n\r\n    let [pair, setPair] = useState();\r\n    let [noLiquidity, setNoLiquidity] = useState();\r\n    let [parsedToken0Amount, setParsedToken0Amount] = useState();\r\n    let [parsedToken1Amount, setParsedToken1Amount] = useState();\r\n\r\n    let [args, setArgs] = useState();\r\n    let [value, setValue] = useState();\r\n\r\n\r\n    let [userLiquidityPositions, setUserLiquidityPositions] = useState([]);\r\n\r\n    const individualFieldPlaceholder = \"Enter amount\";\r\n    const dependentFieldPlaceholder = \"Estimated value\";\r\n    const slippageTolerancePlaceholder = \"please input a number from 1.00 to 100.00\";\r\n\r\n    const {account, chainId, library, activate} = useWeb3React();\r\n    const injected = new InjectedConnector({\r\n        supportedChainIds: [1, 3, 4, 5, 42, 80001],\r\n    });\r\n\r\n\r\n    useEffect(() => {\r\n        // activate(injected);\r\n    }, []);\r\n\r\n    let t0Changed = useCallback(async () => {\r\n        if (!token0 || !token1) return;\r\n        if (!exactIn) return;\r\n        await getEstimated(\r\n            {\r\n                ...token0,\r\n                amount: token0Amount,\r\n            },\r\n            {\r\n                ...token1,\r\n                amount: token1Amount,\r\n            },\r\n            slippageTolerance * 100,\r\n            exactIn,\r\n            chainId,\r\n            library,\r\n            account,\r\n            setToken0Amount,\r\n            setToken1Amount,\r\n            setNeedApproveToken0,\r\n            setNeedApproveToken1,\r\n            setApproveAmountToken0,\r\n            setApproveAmountToken1,\r\n            setApproveToken0ButtonShow,\r\n            setApproveToken1ButtonShow,\r\n            setLiquidityBreakdown,\r\n            setButtonContent,\r\n            setButtonStatus,\r\n            setLiquidityStatus,\r\n            setPair,\r\n            setNoLiquidity,\r\n            setParsedToken0Amount,\r\n            setParsedToken1Amount,\r\n            setArgs,\r\n            setValue);\r\n\r\n    }, [token0, token1, token0Amount, token1Amount, slippageTolerance,exactIn, chainId, library, account]);\r\n    let t1Changed = useCallback(async () => {\r\n        if (!token0 || !token1) return;\r\n        if (exactIn) return;\r\n        await getEstimated(\r\n            {\r\n                ...token0,\r\n                amount: token0Amount,\r\n            },\r\n            {\r\n                ...token1,\r\n                amount: token1Amount,\r\n            },\r\n            slippageTolerance * 100,\r\n            exactIn,\r\n            chainId,\r\n            library,\r\n            account,\r\n            setToken0Amount,\r\n            setToken1Amount,\r\n            setNeedApproveToken0,\r\n            setNeedApproveToken1,\r\n            setApproveAmountToken0,\r\n            setApproveAmountToken1,\r\n            setApproveToken0ButtonShow,\r\n            setApproveToken1ButtonShow,\r\n            setLiquidityBreakdown,\r\n            setButtonContent,\r\n            setButtonStatus,\r\n            setLiquidityStatus,\r\n            setPair,\r\n            setNoLiquidity,\r\n            setParsedToken0Amount,\r\n            setParsedToken1Amount,\r\n            setArgs,\r\n            setValue);\r\n    }, [token0, token1, token0Amount, token1Amount, slippageTolerance, exactIn, chainId, library, account]);\r\n    useEffect(() => {\r\n        t0Changed();\r\n    }, [token0, token1, token0Amount, token1Amount, slippageTolerance,exactIn, chainId, library, account]);\r\n    useEffect(() => {\r\n        t1Changed();\r\n    }, [token0, token1, token0Amount, token1Amount, slippageTolerance,exactIn, chainId, library, account]);\r\n\r\n\r\n    useEffect(() => {\r\n        if (account == undefined) {\r\n            setButtonStatus(true);\r\n            setButtonContent(\"Connect to Wallet\");\r\n        } else {\r\n            setButtonContent(\"choose tokens and amount\");\r\n            setButtonStatus(false);\r\n        }\r\n    }, [chainId, library, account]);\r\n\r\n    useEffect(() => {\r\n        async function getAllUserLiquidityPositions() {\r\n            if (account != undefined) {\r\n                setUserLiquidityPositions(\r\n                    await getAllLiquidityPositions(\r\n                        supportedTokens,\r\n                        chainId,\r\n                        library,\r\n                        account\r\n                    )\r\n                );\r\n            }\r\n        }\r\n\r\n        getAllUserLiquidityPositions();\r\n    }, [chainId, library, account]);\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h1>Add liquidity</h1>\r\n            <Form>\r\n                <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\r\n                    <Dropdown>\r\n                        <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\r\n                            {(token0 && token0.symbol) || \"In token\"}\r\n                        </Dropdown.Toggle>\r\n\r\n                        <Dropdown.Menu>\r\n                            {supportedTokens.map((token, index) => (\r\n                                <Dropdown.Item\r\n                                    key={index}\r\n                                    onClick={async () => {\r\n                                        if (account == undefined) {\r\n                                            alert(\"please connect to your account\");\r\n                                        } else {\r\n                                            setToken0(token);\r\n                                            setToken0Balance(\r\n                                                await getUserTokenBalance(\r\n                                                    token,\r\n                                                    chainId,\r\n                                                    account,\r\n                                                    library\r\n                                                )\r\n                                            );\r\n                                            setToken0BalanceShow(true);\r\n                                        }\r\n                                    }}\r\n                                >\r\n                                    {token.symbol}\r\n                                </Dropdown.Item>\r\n                            ))}\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                    <Form.Control\r\n                        value={token0Amount}\r\n                        placeholder={\r\n                            exactIn ? individualFieldPlaceholder : dependentFieldPlaceholder\r\n                        }\r\n                        onChange={(e) => {\r\n                            setExactIn(true);\r\n                            setToken0Amount(e.target.value);\r\n                        }}\r\n                    />\r\n                    {token0BalanceShow ?\r\n                        <small>Balance: {token0Balance}</small> :\r\n                        <small>not know yet</small>\r\n                    }\r\n                </Form.Group>\r\n                <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\r\n                    <Dropdown>\r\n                        <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\r\n                            {(token1 && token1.symbol) || \"Out token\"}\r\n                        </Dropdown.Toggle>\r\n\r\n                        <Dropdown.Menu>\r\n                            {supportedTokens.map((token, index) => (\r\n                                <Dropdown.Item\r\n                                    key={index}\r\n                                    onClick={async () => {\r\n                                        if (account == undefined) {\r\n                                            alert(\"please connect to your account\");\r\n                                        } else {\r\n                                            setToken1(token);\r\n                                            setToken1Balance(\r\n                                                await getUserTokenBalance(\r\n                                                    token,\r\n                                                    chainId,\r\n                                                    account,\r\n                                                    library\r\n                                                )\r\n                                            );\r\n                                            setToken1BalanceShow(true);\r\n                                        }\r\n                                    }}\r\n                                >\r\n                                    {token.symbol}\r\n                                </Dropdown.Item>\r\n                            ))}\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                    <Form.Control\r\n                        value={token1Amount}\r\n                        placeholder={\r\n                            exactIn ? dependentFieldPlaceholder : individualFieldPlaceholder\r\n                        }\r\n                        onChange={(e) => {\r\n                            setExactIn(false);\r\n                            setToken1Amount(e.target.value);\r\n                        }}\r\n                    />\r\n                    {token1BalanceShow ?\r\n                        <small>Balance: {token1Balance}</small> :\r\n                        <small>not know yet</small>\r\n                    }\r\n                </Form.Group>\r\n                <InputGroup size=\"sm\" className=\"mb-3\">\r\n                    <InputGroup.Text id=\"inputGroup-sizing-sm\">Slippage tolerance </InputGroup.Text>\r\n                    <FormControl\r\n                        aria-label=\"Small\"\r\n                        aria-describedby=\"inputGroup-sizing-sm\"\r\n                        placeholder={slippageTolerancePlaceholder}\r\n                        onChange={(e => {\r\n                            setSlippageTolerance(e.target.value);\r\n                        })}\r\n\r\n                    />\r\n                    <InputGroup.Text>%</InputGroup.Text>\r\n                </InputGroup>\r\n                <Alert variant=\"danger\">\r\n                    the Slippage Tolerance you choose is [ {slippageTolerance}% ]\r\n                </Alert>\r\n\r\n\r\n                <Alert variant=\"primary\">\r\n                    {liquidityBreakdown && <mark>liquidity breakdown</mark>}\r\n                    {liquidityBreakdown && liquidityBreakdown.map((info) => <p>{info}</p>)}\r\n                </Alert>\r\n\r\n\r\n                {/* APPROVE BUTTONS */}\r\n                {\r\n                    approveToken0ButtonShow == true && <mark>\r\n                        <Button\r\n                            variant=\"warning\"\r\n                            onClick={async () => {\r\n\r\n                                \r\n                                let state = await approve(token0.address, approveAmountToken0, library, account);\r\n                                \r\n                                if (state == true) {\r\n                                 \r\n                                    setNeedApproveToken0(false);\r\n\r\n                                    await getEstimated(\r\n                                        {\r\n                                            ...token0,\r\n                                            amount: token0Amount,\r\n                                        },\r\n                                        {\r\n                                            ...token1,\r\n                                            amount: token1Amount,\r\n                                        },\r\n                                        slippageTolerance * 100,\r\n                                        exactIn,\r\n                                        chainId,\r\n                                        library,\r\n                                        account,\r\n                                        setToken0Amount,\r\n                                        setToken1Amount,\r\n                                        setNeedApproveToken0,\r\n                                        setNeedApproveToken1,\r\n                                        setApproveAmountToken0,\r\n                                        setApproveAmountToken1,\r\n                                        setApproveToken0ButtonShow,\r\n                                        setApproveToken1ButtonShow,\r\n                                        setLiquidityBreakdown,\r\n                                        setButtonContent,\r\n                                        setButtonStatus,\r\n                                        setLiquidityStatus,\r\n                                        setPair,\r\n                                        setNoLiquidity,\r\n                                        setParsedToken0Amount,\r\n                                        setParsedToken1Amount,\r\n                                        setArgs,\r\n                                        setValue);\r\n\r\n\r\n\r\n                                    if (needApproveToken1 == false) {\r\n                                        if (!noLiquidity) setButtonContent(\"add liquidity\");\r\n                                        else setButtonStatus(\"create new pool\");\r\n                                        setButtonStatus(true);\r\n                                    }\r\n\r\n                                }\r\n                            }}\r\n                            disabled={!needApproveToken0}\r\n                        >\r\n                            Approve {token0 && token0.symbol}\r\n                        </Button>\r\n                        {' '}\r\n                    </mark>\r\n                }\r\n                {\r\n                    approveToken1ButtonShow == true && <mark>\r\n                        <Button\r\n                            variant=\"warning\"\r\n                            onClick={async () => {\r\n                                let state = await approve(token1.address, approveAmountToken1, library, account);\r\n\r\n                                if (state == true) {\r\n                                    // console.log(\"TTTTTTTTTTTTTTTTTTTTTTT\");\r\n                                    // alert(\"TTTTTTTTTTTTTT\");\r\n                                    setNeedApproveToken1(false);\r\n\r\n                                    await getEstimated(\r\n                                        {\r\n                                            ...token0,\r\n                                            amount: token0Amount,\r\n                                        },\r\n                                        {\r\n                                            ...token1,\r\n                                            amount: token1Amount,\r\n                                        },\r\n                                        slippageTolerance * 100,\r\n                                        exactIn,\r\n                                        chainId,\r\n                                        library,\r\n                                        account,\r\n                                        setToken0Amount,\r\n                                        setToken1Amount,\r\n                                        setNeedApproveToken0,\r\n                                        setNeedApproveToken1,\r\n                                        setApproveAmountToken0,\r\n                                        setApproveAmountToken1,\r\n                                        setApproveToken0ButtonShow,\r\n                                        setApproveToken1ButtonShow,\r\n                                        setLiquidityBreakdown,\r\n                                        setButtonContent,\r\n                                        setButtonStatus,\r\n                                        setLiquidityStatus,\r\n                                        setPair,\r\n                                        setNoLiquidity,\r\n                                        setParsedToken0Amount,\r\n                                        setParsedToken1Amount,\r\n                                        setArgs,\r\n                                        setValue);\r\n                                    if (needApproveToken0 == false) {\r\n                                        if (!noLiquidity) setButtonContent(\"add liquidity\");\r\n                                        else setButtonStatus(\"create new pool\");\r\n                                        setButtonStatus(true);\r\n                                    }\r\n                                }\r\n                            }}\r\n                            disabled={!needApproveToken1}\r\n                        >\r\n                            Approve {token1 && token1.symbol}\r\n                        </Button>\r\n                        {' '}\r\n                    </mark>\r\n                }\r\n                <Button\r\n                    variant=\"success\"\r\n                    disabled={!buttonStatus}\r\n                    onClick={async () => {\r\n                        if (account == undefined) {\r\n                            activate(injected);\r\n                            setButtonContent(\"choose tokens and amount\");\r\n                            setButtonStatus(false);\r\n                        } else {\r\n                            await addLiquidity(\r\n                                {\r\n                                    ...token0,\r\n                                    amount: token0Amount,\r\n                                },\r\n                                {\r\n                                    ...token1,\r\n                                    amount: token1Amount,\r\n                                },\r\n                                100 * slippageTolerance,\r\n                                exactIn,\r\n                                chainId,\r\n                                library,\r\n                                account,\r\n                                pair,\r\n                                noLiquidity,\r\n                                parsedToken0Amount,\r\n                                parsedToken1Amount,\r\n                                args,\r\n                                value,\r\n                                setLiquidityStatus\r\n                            );\r\n\r\n                        }\r\n                    }\r\n                    }\r\n                >\r\n                    {buttonContent}\r\n                </Button>\r\n                <Alert variant=\"primary\">\r\n                    {liquidityStatus && <mark> liquidityStatus:</mark>}\r\n                    {liquidityStatus && <p> {liquidityStatus}</p>}\r\n                </Alert>\r\n\r\n                <h2></h2>\r\n                {userLiquidityPositions.map((position) => (\r\n                    <Alert variant=\"dark\">\r\n                        {Object.values(position).map((field) => (\r\n                            <p>{field}</p>\r\n                        ))}\r\n                    </Alert>\r\n                ))}\r\n            </Form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LiquidityComponent;\r\n","import React from \"react\";\r\n\r\nimport { Web3ReactProvider } from \"@web3-react/core\";\r\nimport { Web3Provider } from \"@ethersproject/providers\";\r\nimport LiquidityComponent from \"./LiquidityComponent\";\r\nimport RemoveLiquidityComponent from \"./RemoveLiquidityComponent\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./styles/Liquidity.css\";\r\n\r\nfunction getLibrary(provider, connector) {\r\n  return new Web3Provider(provider); // this will vary according to whether you use e.g. ethers or web3.js\r\n}\r\nfunction Liquidity() {\r\n  return (\r\n    <Web3ReactProvider getLibrary={getLibrary}>\r\n      <div\r\n        className=\"Liquidity\"\r\n        style={{ \"padding-left\": \"15%\", \"padding-right\": \"15%\" }}\r\n      >\r\n        <LiquidityComponent />\r\n      </div>\r\n    </Web3ReactProvider>\r\n  );\r\n}\r\n\r\nexport default Liquidity;\r\n","import { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport Navbar from \"./components/Navbar\";\r\nimport NotFound from \"./components/NotFound\";\r\nimport Home from \"./components/Home\";\r\nimport Transaction from \"./components/Transaction\";\r\nimport Liquidity from \"./components/Liquidity\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.css\";\r\n\r\n// import your favorite web3 convenience library here\r\n\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter>\r\n      <div className=\"App\">\r\n        <Navbar />\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Home}>\r\n            <Home />\r\n          </Route>\r\n          <Route exact path=\"/Liquidity\" component={Liquidity}>\r\n            <Liquidity />\r\n          </Route>\r\n          <Route component={NotFound}></Route>\r\n        </Switch>\r\n      </div>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}